/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgrammeProgrammeParserRuleCall_0()); 
	    }
		lv_programme_0_0=ruleProgramme		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"programme",
        		lv_programme_0_0, 
        		"Programme");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProgramme
entryRuleProgramme returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgrammeRule()); }
	 iv_ruleProgramme=ruleProgramme 
	 { $current=$iv_ruleProgramme.current; } 
	 EOF 
;

// Rule Programme
ruleProgramme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getProgrammeAccess().getProgrammeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getProgrammeAccess().getFonctFonctionParserRuleCall_1_0_0()); 
	    }
		lv_fonct_1_0=ruleFonction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgrammeRule());
	        }
       		add(
       			$current, 
       			"fonct",
        		lv_fonct_1_0, 
        		"Fonction");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_CR_2=RULE_CR
    { 
    newLeafNode(this_CR_2, grammarAccess.getProgrammeAccess().getCRTerminalRuleCall_1_1()); 
    }
)*)*)
;





// Entry rule entryRuleFonction
entryRuleFonction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFonctionRule()); }
	 iv_ruleFonction=ruleFonction 
	 { $current=$iv_ruleFonction.current; } 
	 EOF 
;

// Rule Fonction
ruleFonction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fonction' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFonctionAccess().getFonctionKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_symbole_2_0=RULE_SYM
		{
			newLeafNode(lv_symbole_2_0, grammarAccess.getFonctionAccess().getSymboleSYMTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFonctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"symbole",
        		lv_symbole_2_0, 
        		"SYM");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFonctionAccess().getColonKeyword_3());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_4()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_5='read' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFonctionAccess().getReadKeyword_5());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_6()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFonctionAccess().getInInputParserRuleCall_7_0()); 
	    }
		lv_in_7_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFonctionRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_7_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='%' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFonctionAccess().getPercentSignKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFonctionAccess().getComCommandesParserRuleCall_9_0()); 
	    }
		lv_com_9_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFonctionRule());
	        }
       		set(
       			$current, 
       			"com",
        		lv_com_9_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='%' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFonctionAccess().getPercentSignKeyword_10());
    }
	otherlv_11='write' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFonctionAccess().getWriteKeyword_11());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_12()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFonctionAccess().getOutOutputParserRuleCall_13_0()); 
	    }
		lv_out_13_0=ruleOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFonctionRule());
	        }
       		set(
       			$current, 
       			"out",
        		lv_out_13_0, 
        		"Output");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_var1_0_0=RULE_VAR
		{
			newLeafNode(lv_var1_0_0, grammarAccess.getInputAccess().getVar1VARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var1",
        		lv_var1_0_0, 
        		"VAR");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getCommaKeyword_1_0());
    }
(
(
		lv_var2_2_0=RULE_VAR
		{
			newLeafNode(lv_var2_2_0, grammarAccess.getInputAccess().getVar2VARTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"var2",
        		lv_var2_2_0, 
        		"VAR");
	    }

)
))*)
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_var1_0_0=RULE_VAR
		{
			newLeafNode(lv_var1_0_0, grammarAccess.getOutputAccess().getVar1VARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var1",
        		lv_var1_0_0, 
        		"VAR");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getCommaKeyword_1_0());
    }
(
(
		lv_var2_2_0=RULE_VAR
		{
			newLeafNode(lv_var2_2_0, grammarAccess.getOutputAccess().getVar2VARTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"var2",
        		lv_var2_2_0, 
        		"VAR");
	    }

)
))*)
;





// Entry rule entryRuleCommandes
entryRuleCommandes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandesRule()); }
	 iv_ruleCommandes=ruleCommandes 
	 { $current=$iv_ruleCommandes.current; } 
	 EOF 
;

// Rule Commandes
ruleCommandes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandesAccess().getCom1CommandeParserRuleCall_0_0()); 
	    }
		lv_com1_0_0=ruleCommande		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandesRule());
	        }
       		set(
       			$current, 
       			"com1",
        		lv_com1_0_0, 
        		"Commande");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommandesAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandesAccess().getCom2CommandeParserRuleCall_1_1_0()); 
	    }
		lv_com2_2_0=ruleCommande		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandesRule());
	        }
       		add(
       			$current, 
       			"com2",
        		lv_com2_2_0, 
        		"Commande");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCommande
entryRuleCommande returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandeRule()); }
	 iv_ruleCommande=ruleCommande 
	 { $current=$iv_ruleCommande.current; } 
	 EOF 
;

// Rule Commande
ruleCommande returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommandeAccess().getCommandeAction_0_0(),
            $current);
    }
)(
(
		lv_nop_1_0=	'nop' 
    {
        newLeafNode(lv_nop_1_0, grammarAccess.getCommandeAccess().getNopNopKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommandeRule());
	        }
       		setWithLastConsumed($current, "nop", lv_nop_1_0, "nop");
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandeAccess().getAffectVarAffectVarParserRuleCall_1_0()); 
	    }
		lv_affectVar_2_0=ruleAffectVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandeRule());
	        }
       		set(
       			$current, 
       			"affectVar",
        		lv_affectVar_2_0, 
        		"AffectVar");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandeAccess().getWhileCWhileParserRuleCall_2_0()); 
	    }
		lv_whileC_3_0=ruleWhile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandeRule());
	        }
       		set(
       			$current, 
       			"whileC",
        		lv_whileC_3_0, 
        		"While");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandeAccess().getForCForParserRuleCall_3_0()); 
	    }
		lv_forC_4_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandeRule());
	        }
       		set(
       			$current, 
       			"forC",
        		lv_forC_4_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandeAccess().getIfCIfParserRuleCall_4_0()); 
	    }
		lv_ifC_5_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandeRule());
	        }
       		set(
       			$current, 
       			"ifC",
        		lv_ifC_5_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandeAccess().getForeachCForeachParserRuleCall_5_0()); 
	    }
		lv_foreachC_6_0=ruleForeach		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandeRule());
	        }
       		set(
       			$current, 
       			"foreachC",
        		lv_foreachC_6_0, 
        		"Foreach");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAffectVar
entryRuleAffectVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectVarRule()); }
	 iv_ruleAffectVar=ruleAffectVar 
	 { $current=$iv_ruleAffectVar.current; } 
	 EOF 
;

// Rule AffectVar
ruleAffectVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAffectVarAccess().getVar1VarsParserRuleCall_0_0()); 
	    }
		lv_var1_0_0=ruleVars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectVarRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_0_0, 
        		"Vars");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectVarAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectVarAccess().getExpExprsParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleExprs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectVarRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"Exprs");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getExp2ExprParserRuleCall_2_0()); 
	    }
		lv_exp2_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"exp2",
        		lv_exp2_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getDoKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getCom3CommandesParserRuleCall_6_0()); 
	    }
		lv_com3_6_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"com3",
        		lv_com3_6_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getWhileAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getExp3ExprParserRuleCall_2_0()); 
	    }
		lv_exp3_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"exp3",
        		lv_exp3_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForAccess().getDoKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getCom4CommandesParserRuleCall_6_0()); 
	    }
		lv_com4_6_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"com4",
        		lv_com4_6_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getExp4ExprParserRuleCall_2_0()); 
	    }
		lv_exp4_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"exp4",
        		lv_exp4_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfAccess().getThenKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCom5CommandesParserRuleCall_6_0()); 
	    }
		lv_com5_6_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"com5",
        		lv_com5_6_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfAccess().getElseKeyword_8_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_8_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCom6CommandesParserRuleCall_8_2_0()); 
	    }
		lv_com6_10_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"com6",
        		lv_com6_10_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_8_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_12='fi' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIfAccess().getFiKeyword_9());
    }
)
;





// Entry rule entryRuleForeach
entryRuleForeach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	 iv_ruleForeach=ruleForeach 
	 { $current=$iv_ruleForeach.current; } 
	 EOF 
;

// Rule Foreach
ruleForeach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getForeachKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getExp5ExprParserRuleCall_2_0()); 
	    }
		lv_exp5_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"exp5",
        		lv_exp5_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForeachAccess().getInKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getExp6ExprParserRuleCall_6_0()); 
	    }
		lv_exp6_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"exp6",
        		lv_exp6_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='do' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForeachAccess().getDoKeyword_8());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getCom7CommandesParserRuleCall_10_0()); 
	    }
		lv_com7_10_0=ruleCommandes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"com7",
        		lv_com7_10_0, 
        		"Commandes");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_12='od' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getForeachAccess().getOdKeyword_12());
    }
)
;





// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	 iv_ruleVars=ruleVars 
	 { $current=$iv_ruleVars.current; } 
	 EOF 
;

// Rule Vars
ruleVars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_var1_0_0=RULE_VAR
		{
			newLeafNode(lv_var1_0_0, grammarAccess.getVarsAccess().getVar1VARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var1",
        		lv_var1_0_0, 
        		"VAR");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarsAccess().getCommaKeyword_1_0());
    }
(
(
		lv_var2_2_0=RULE_VAR
		{
			newLeafNode(lv_var2_2_0, grammarAccess.getVarsAccess().getVar2VARTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarsRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"var2",
        		lv_var2_2_0, 
        		"VAR");
	    }

)
))*)
;





// Entry rule entryRuleExprs
entryRuleExprs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	 iv_ruleExprs=ruleExprs 
	 { $current=$iv_ruleExprs.current; } 
	 EOF 
;

// Rule Exprs
ruleExprs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprsAccess().getExprSExprParserRuleCall_0_0()); 
	    }
		lv_exprS_0_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprsRule());
	        }
       		set(
       			$current, 
       			"exprS",
        		lv_exprS_0_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprsAccess().getExprS2ExprParserRuleCall_1_1_0()); 
	    }
		lv_exprS2_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprsRule());
	        }
       		add(
       			$current, 
       			"exprS2",
        		lv_exprS2_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExpAExprAndParserRuleCall_0_0()); 
	    }
		lv_expA_0_0=ruleExprAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"expA",
        		lv_expA_0_0, 
        		"ExprAnd");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExpSExprSimpleParserRuleCall_1_0()); 
	    }
		lv_expS_1_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"expS",
        		lv_expS_1_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	 iv_ruleExprSimple=ruleExprSimple 
	 { $current=$iv_ruleExprSimple.current; } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExprSimpleAccess().getExprSimpleAction_0_0(),
            $current);
    }
)	otherlv_1='nil' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprSimpleAccess().getNilKeyword_0_1());
    }
)
    |(
(
		lv_var_2_0=RULE_VAR
		{
			newLeafNode(lv_var_2_0, grammarAccess.getExprSimpleAccess().getVarVARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"VAR");
	    }

)
)
    |(
(
		lv_symbole_3_0=RULE_SYM
		{
			newLeafNode(lv_symbole_3_0, grammarAccess.getExprSimpleAccess().getSymboleSYMTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"symbole",
        		lv_symbole_3_0, 
        		"SYM");
	    }

)
)
    |(this_PARAG_4=RULE_PARAG
    { 
    newLeafNode(this_PARAG_4, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_3_0()); 
    }
	otherlv_5='cons' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExprSimpleAccess().getConsKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLeLExprParserRuleCall_3_2_0()); 
	    }
		lv_le_6_0=ruleLExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"le",
        		lv_le_6_0, 
        		"LExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_7=RULE_PARAD
    { 
    newLeafNode(this_PARAD_7, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_3_3()); 
    }
)
    |(this_PARAG_8=RULE_PARAG
    { 
    newLeafNode(this_PARAG_8, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_4_0()); 
    }
	otherlv_9='list' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExprSimpleAccess().getListKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLe2LExprParserRuleCall_4_2_0()); 
	    }
		lv_le2_10_0=ruleLExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"le2",
        		lv_le2_10_0, 
        		"LExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_11=RULE_PARAD
    { 
    newLeafNode(this_PARAD_11, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_4_3()); 
    }
)
    |(this_PARAG_12=RULE_PARAG
    { 
    newLeafNode(this_PARAG_12, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_5_0()); 
    }
	otherlv_13='hd' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExprSimpleAccess().getHdKeyword_5_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_5_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLe3ExprParserRuleCall_5_3_0()); 
	    }
		lv_le3_15_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"le3",
        		lv_le3_15_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_16=RULE_PARAD
    { 
    newLeafNode(this_PARAD_16, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_5_4()); 
    }
)
    |(this_PARAG_17=RULE_PARAG
    { 
    newLeafNode(this_PARAG_17, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_6_0()); 
    }
	otherlv_18='tl' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getExprSimpleAccess().getTlKeyword_6_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_6_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLe4ExprParserRuleCall_6_3_0()); 
	    }
		lv_le4_20_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"le4",
        		lv_le4_20_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_21=RULE_PARAD
    { 
    newLeafNode(this_PARAD_21, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_6_4()); 
    }
)
    |(this_PARAG_22=RULE_PARAG
    { 
    newLeafNode(this_PARAG_22, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_7_0()); 
    }
this_SYM_23=RULE_SYM
    { 
    newLeafNode(this_SYM_23, grammarAccess.getExprSimpleAccess().getSYMTerminalRuleCall_7_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLe5LExprParserRuleCall_7_2_0()); 
	    }
		lv_le5_24_0=ruleLExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"le5",
        		lv_le5_24_0, 
        		"LExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_25=RULE_PARAD
    { 
    newLeafNode(this_PARAD_25, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_7_3()); 
    }
))
;





// Entry rule entryRuleLExpr
entryRuleLExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLExprRule()); }
	 iv_ruleLExpr=ruleLExpr 
	 { $current=$iv_ruleLExpr.current; } 
	 EOF 
;

// Rule LExpr
ruleLExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLExprAccess().getExpExprParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLExprRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))+
;





// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	 iv_ruleExprAnd=ruleExprAnd 
	 { $current=$iv_ruleExprAnd.current; } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAndAccess().getExpOExprOrParserRuleCall_0_0()); 
	    }
		lv_expO_0_0=ruleExprOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAndRule());
	        }
       		set(
       			$current, 
       			"expO",
        		lv_expO_0_0, 
        		"ExprOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprAndAccess().getAndKeyword_1_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAndAccess().getExpO2ExprOrParserRuleCall_1_3_0()); 
	    }
		lv_expO2_4_0=ruleExprOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAndRule());
	        }
       		add(
       			$current, 
       			"expO2",
        		lv_expO2_4_0, 
        		"ExprOr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprOr
entryRuleExprOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	 iv_ruleExprOr=ruleExprOr 
	 { $current=$iv_ruleExprOr.current; } 
	 EOF 
;

// Rule ExprOr
ruleExprOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprOrAccess().getExpNExprNotParserRuleCall_0_0()); 
	    }
		lv_expN_0_0=ruleExprNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprOrRule());
	        }
       		set(
       			$current, 
       			"expN",
        		lv_expN_0_0, 
        		"ExprNot");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprOrAccess().getOrKeyword_1_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprOrAccess().getExpN2ExprNotParserRuleCall_1_3_0()); 
	    }
		lv_expN2_4_0=ruleExprNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprOrRule());
	        }
       		add(
       			$current, 
       			"expN2",
        		lv_expN2_4_0, 
        		"ExprNot");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprNot
entryRuleExprNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	 iv_ruleExprNot=ruleExprNot 
	 { $current=$iv_ruleExprNot.current; } 
	 EOF 
;

// Rule ExprNot
ruleExprNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprNotAccess().getNotKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExprNotAccess().getExpEqExprEqParserRuleCall_1_0()); 
	    }
		lv_expEq_2_0=ruleExprEq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprNotRule());
	        }
       		set(
       			$current, 
       			"expEq",
        		lv_expEq_2_0, 
        		"ExprEq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExprEq
entryRuleExprEq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	 iv_ruleExprEq=ruleExprEq 
	 { $current=$iv_ruleExprEq.current; } 
	 EOF 
;

// Rule ExprEq
ruleExprEq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExpSiExprSimpleParserRuleCall_0_0_0()); 
	    }
		lv_ExpSi_0_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"ExpSi",
        		lv_ExpSi_0_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExpS2ExprSimpleParserRuleCall_0_2_0()); 
	    }
		lv_ExpS2_2_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"ExpS2",
        		lv_ExpS2_2_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_PARAG_3=RULE_PARAG
    { 
    newLeafNode(this_PARAG_3, grammarAccess.getExprEqAccess().getPARAGTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExpExprParserRuleCall_1_1_0()); 
	    }
		lv_exp_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PARAD_5=RULE_PARAD
    { 
    newLeafNode(this_PARAD_5, grammarAccess.getExprEqAccess().getPARADTerminalRuleCall_1_2()); 
    }
))
;





// Entry rule entryRuleLC
entryRuleLC returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCRule()); } 
	 iv_ruleLC=ruleLC 
	 { $current=$iv_ruleLC.current.getText(); }  
	 EOF 
;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SP_0=RULE_SP    {
		$current.merge(this_SP_0);
    }

    { 
    newLeafNode(this_SP_0, grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); 
    }

    |    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); 
    }

    |    this_TAB_2=RULE_TAB    {
		$current.merge(this_TAB_2);
    }

    { 
    newLeafNode(this_TAB_2, grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); 
    }

    |    this_LF_3=RULE_LF    {
		$current.merge(this_LF_3);
    }

    { 
    newLeafNode(this_LF_3, grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); 
    }
)?
    ;





RULE_VAR : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_SYM : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('a'..'z'|'A'..'Z'|'0'..'9')+)* ('?'|'!')?;

RULE_PARAG : '(';

RULE_PARAD : ')';

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


