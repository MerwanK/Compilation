/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgrammeProgrammeParserRuleCall_0()); 
	    }
		lv_programme_0_0=ruleProgramme		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"programme",
        		lv_programme_0_0, 
        		"Programme");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProgramme
entryRuleProgramme returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgrammeRule()); } 
	 iv_ruleProgramme=ruleProgramme 
	 { $current=$iv_ruleProgramme.current.getText(); }  
	 EOF 
;

// Rule Programme
ruleProgramme returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgrammeAccess().getFonctionParserRuleCall_0()); 
    }
    this_Fonction_0=ruleFonction    {
		$current.merge(this_Fonction_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getProgrammeAccess().getCRTerminalRuleCall_1()); 
    }
)*)*
    ;





// Entry rule entryRuleFonction
entryRuleFonction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFonctionRule()); } 
	 iv_ruleFonction=ruleFonction 
	 { $current=$iv_ruleFonction.current.getText(); }  
	 EOF 
;

// Rule Fonction
ruleFonction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='fonction' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getFonctionKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_1()); 
    }
    this_LC_1=ruleLC    {
		$current.merge(this_LC_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_SYM_2=RULE_SYM    {
		$current.merge(this_SYM_2);
    }

    { 
    newLeafNode(this_SYM_2, grammarAccess.getFonctionAccess().getSYMTerminalRuleCall_2()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getColonKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_4()); 
    }
    this_LC_4=ruleLC    {
		$current.merge(this_LC_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='read' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getReadKeyword_5()); 
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_6()); 
    }
    this_LC_6=ruleLC    {
		$current.merge(this_LC_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getInputParserRuleCall_7()); 
    }
    this_Input_7=ruleInput    {
		$current.merge(this_Input_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getPercentSignKeyword_8()); 
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getCommandesParserRuleCall_9()); 
    }
    this_Commandes_9=ruleCommandes    {
		$current.merge(this_Commandes_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getPercentSignKeyword_10()); 
    }

	kw='write' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFonctionAccess().getWriteKeyword_11()); 
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getLCParserRuleCall_12()); 
    }
    this_LC_12=ruleLC    {
		$current.merge(this_LC_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFonctionAccess().getOutputParserRuleCall_13()); 
    }
    this_Output_13=ruleOutput    {
		$current.merge(this_Output_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInput
entryRuleInput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); } 
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current.getText(); }  
	 EOF 
;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getInputAccess().getVARTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputAccess().getCommaKeyword_1_0()); 
    }
    this_VAR_2=RULE_VAR    {
		$current.merge(this_VAR_2);
    }

    { 
    newLeafNode(this_VAR_2, grammarAccess.getInputAccess().getVARTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); } 
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current.getText(); }  
	 EOF 
;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getOutputAccess().getVARTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutputAccess().getCommaKeyword_1_0()); 
    }
    this_VAR_2=RULE_VAR    {
		$current.merge(this_VAR_2);
    }

    { 
    newLeafNode(this_VAR_2, grammarAccess.getOutputAccess().getVARTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleCommandes
entryRuleCommandes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandesRule()); } 
	 iv_ruleCommandes=ruleCommandes 
	 { $current=$iv_ruleCommandes.current.getText(); }  
	 EOF 
;

// Rule Commandes
ruleCommandes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandesAccess().getCommandeParserRuleCall_0()); 
    }
    this_Commande_0=ruleCommande    {
		$current.merge(this_Commande_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandesAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandesAccess().getCommandeParserRuleCall_1_1()); 
    }
    this_Commande_2=ruleCommande    {
		$current.merge(this_Commande_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleCommande
entryRuleCommande returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandeRule()); } 
	 iv_ruleCommande=ruleCommande 
	 { $current=$iv_ruleCommande.current.getText(); }  
	 EOF 
;

// Rule Commande
ruleCommande returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='nop' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getNopKeyword_0()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getVarsParserRuleCall_1_0()); 
    }
    this_Vars_1=ruleVars    {
		$current.merge(this_Vars_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getColonEqualsSignKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getExprsParserRuleCall_1_2()); 
    }
    this_Exprs_3=ruleExprs    {
		$current.merge(this_Exprs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |((
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getWhileKeyword_2_0_0()); 
    }

    |
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getForKeyword_2_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_2_1()); 
    }
    this_LC_6=ruleLC    {
		$current.merge(this_LC_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getExprParserRuleCall_2_2()); 
    }
    this_Expr_7=ruleExpr    {
		$current.merge(this_Expr_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_2_3()); 
    }
    this_LC_8=ruleLC    {
		$current.merge(this_LC_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getDoKeyword_2_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_2_5()); 
    }
    this_LC_10=ruleLC    {
		$current.merge(this_LC_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getCommandesParserRuleCall_2_6()); 
    }
    this_Commandes_11=ruleCommandes    {
		$current.merge(this_Commandes_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_2_7()); 
    }
    this_LC_12=ruleLC    {
		$current.merge(this_LC_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='od' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getOdKeyword_2_8()); 
    }
)
    |(
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getIfKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_1()); 
    }
    this_LC_15=ruleLC    {
		$current.merge(this_LC_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getExprParserRuleCall_3_2()); 
    }
    this_Expr_16=ruleExpr    {
		$current.merge(this_Expr_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_3()); 
    }
    this_LC_17=ruleLC    {
		$current.merge(this_LC_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='then' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getThenKeyword_3_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_5()); 
    }
    this_LC_19=ruleLC    {
		$current.merge(this_LC_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getCommandesParserRuleCall_3_6()); 
    }
    this_Commandes_20=ruleCommandes    {
		$current.merge(this_Commandes_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_7()); 
    }
    this_LC_21=ruleLC    {
		$current.merge(this_LC_21);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getElseKeyword_3_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_8_1()); 
    }
    this_LC_23=ruleLC    {
		$current.merge(this_LC_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getCommandesParserRuleCall_3_8_2()); 
    }
    this_Commandes_24=ruleCommandes    {
		$current.merge(this_Commandes_24);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_3_8_3()); 
    }
    this_LC_25=ruleLC    {
		$current.merge(this_LC_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='fi' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getFiKeyword_3_9()); 
    }
)
    |(
	kw='foreach' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getForeachKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_1()); 
    }
    this_LC_28=ruleLC    {
		$current.merge(this_LC_28);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getExprParserRuleCall_4_2()); 
    }
    this_Expr_29=ruleExpr    {
		$current.merge(this_Expr_29);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_3()); 
    }
    this_LC_30=ruleLC    {
		$current.merge(this_LC_30);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getInKeyword_4_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_5()); 
    }
    this_LC_32=ruleLC    {
		$current.merge(this_LC_32);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getExprParserRuleCall_4_6()); 
    }
    this_Expr_33=ruleExpr    {
		$current.merge(this_Expr_33);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_7()); 
    }
    this_LC_34=ruleLC    {
		$current.merge(this_LC_34);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getDoKeyword_4_8()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_9()); 
    }
    this_LC_36=ruleLC    {
		$current.merge(this_LC_36);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getCommandesParserRuleCall_4_10()); 
    }
    this_Commandes_37=ruleCommandes    {
		$current.merge(this_Commandes_37);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandeAccess().getLCParserRuleCall_4_11()); 
    }
    this_LC_38=ruleLC    {
		$current.merge(this_LC_38);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='od' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandeAccess().getOdKeyword_4_12()); 
    }
))
    ;





// Entry rule entryRuleVars
entryRuleVars returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarsRule()); } 
	 iv_ruleVars=ruleVars 
	 { $current=$iv_ruleVars.current.getText(); }  
	 EOF 
;

// Rule Vars
ruleVars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getVarsAccess().getVARTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarsAccess().getCommaKeyword_1_0()); 
    }
    this_VAR_2=RULE_VAR    {
		$current.merge(this_VAR_2);
    }

    { 
    newLeafNode(this_VAR_2, grammarAccess.getVarsAccess().getVARTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleExprs
entryRuleExprs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprsRule()); } 
	 iv_ruleExprs=ruleExprs 
	 { $current=$iv_ruleExprs.current.getText(); }  
	 EOF 
;

// Rule Exprs
ruleExprs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_0()); 
    }
    this_Expr_0=ruleExpr    {
		$current.merge(this_Expr_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprsAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_1_1()); 
    }
    this_Expr_2=ruleExpr    {
		$current.merge(this_Expr_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleExpr
entryRuleExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); } 
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current.getText(); }  
	 EOF 
;

// Rule Expr
ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getExprAndParserRuleCall_0()); 
    }
    this_ExprAnd_0=ruleExprAnd    {
		$current.merge(this_ExprAnd_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getExprSimpleParserRuleCall_1()); 
    }
    this_ExprSimple_1=ruleExprSimple    {
		$current.merge(this_ExprSimple_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); } 
	 iv_ruleExprSimple=ruleExprSimple 
	 { $current=$iv_ruleExprSimple.current.getText(); }  
	 EOF 
;

// Rule ExprSimple
ruleExprSimple returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='nil' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprSimpleAccess().getNilKeyword_0()); 
    }

    |    this_VAR_1=RULE_VAR    {
		$current.merge(this_VAR_1);
    }

    { 
    newLeafNode(this_VAR_1, grammarAccess.getExprSimpleAccess().getVARTerminalRuleCall_1()); 
    }

    |    this_SYM_2=RULE_SYM    {
		$current.merge(this_SYM_2);
    }

    { 
    newLeafNode(this_SYM_2, grammarAccess.getExprSimpleAccess().getSYMTerminalRuleCall_2()); 
    }

    |(    this_PARAG_3=RULE_PARAG    {
		$current.merge(this_PARAG_3);
    }

    { 
    newLeafNode(this_PARAG_3, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_3_0()); 
    }

	kw='cons' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprSimpleAccess().getConsKeyword_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_3_2()); 
    }
    this_LExpr_5=ruleLExpr    {
		$current.merge(this_LExpr_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_6=RULE_PARAD    {
		$current.merge(this_PARAD_6);
    }

    { 
    newLeafNode(this_PARAD_6, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_3_3()); 
    }
)
    |(    this_PARAG_7=RULE_PARAG    {
		$current.merge(this_PARAG_7);
    }

    { 
    newLeafNode(this_PARAG_7, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_4_0()); 
    }

	kw='list' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprSimpleAccess().getListKeyword_4_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_4_2()); 
    }
    this_LExpr_9=ruleLExpr    {
		$current.merge(this_LExpr_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_10=RULE_PARAD    {
		$current.merge(this_PARAD_10);
    }

    { 
    newLeafNode(this_PARAD_10, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_4_3()); 
    }
)
    |(    this_PARAG_11=RULE_PARAG    {
		$current.merge(this_PARAG_11);
    }

    { 
    newLeafNode(this_PARAG_11, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_5_0()); 
    }

	kw='hd' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprSimpleAccess().getHdKeyword_5_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_5_2()); 
    }
    this_LC_13=ruleLC    {
		$current.merge(this_LC_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_5_3()); 
    }
    this_Expr_14=ruleExpr    {
		$current.merge(this_Expr_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_15=RULE_PARAD    {
		$current.merge(this_PARAD_15);
    }

    { 
    newLeafNode(this_PARAD_15, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_5_4()); 
    }
)
    |(    this_PARAG_16=RULE_PARAG    {
		$current.merge(this_PARAG_16);
    }

    { 
    newLeafNode(this_PARAG_16, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_6_0()); 
    }

	kw='tl' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprSimpleAccess().getTlKeyword_6_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_6_2()); 
    }
    this_LC_18=ruleLC    {
		$current.merge(this_LC_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_6_3()); 
    }
    this_Expr_19=ruleExpr    {
		$current.merge(this_Expr_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_20=RULE_PARAD    {
		$current.merge(this_PARAD_20);
    }

    { 
    newLeafNode(this_PARAD_20, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_6_4()); 
    }
)
    |(    this_PARAG_21=RULE_PARAG    {
		$current.merge(this_PARAG_21);
    }

    { 
    newLeafNode(this_PARAG_21, grammarAccess.getExprSimpleAccess().getPARAGTerminalRuleCall_7_0()); 
    }
    this_SYM_22=RULE_SYM    {
		$current.merge(this_SYM_22);
    }

    { 
    newLeafNode(this_SYM_22, grammarAccess.getExprSimpleAccess().getSYMTerminalRuleCall_7_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_7_2()); 
    }
    this_LExpr_23=ruleLExpr    {
		$current.merge(this_LExpr_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_24=RULE_PARAD    {
		$current.merge(this_PARAD_24);
    }

    { 
    newLeafNode(this_PARAD_24, grammarAccess.getExprSimpleAccess().getPARADTerminalRuleCall_7_3()); 
    }
))
    ;





// Entry rule entryRuleLExpr
entryRuleLExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLExprRule()); } 
	 iv_ruleLExpr=ruleLExpr 
	 { $current=$iv_ruleLExpr.current.getText(); }  
	 EOF 
;

// Rule LExpr
ruleLExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); 
    }
    this_LC_0=ruleLC    {
		$current.merge(this_LC_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getLExprAccess().getExprParserRuleCall_1()); 
    }
    this_Expr_1=ruleExpr    {
		$current.merge(this_Expr_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprAndRule()); } 
	 iv_ruleExprAnd=ruleExprAnd 
	 { $current=$iv_ruleExprAnd.current.getText(); }  
	 EOF 
;

// Rule ExprAnd
ruleExprAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0()); 
    }
    this_ExprOr_0=ruleExprOr    {
		$current.merge(this_ExprOr_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); 
    }
    this_LC_1=ruleLC    {
		$current.merge(this_LC_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprAndAccess().getAndKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); 
    }
    this_LC_3=ruleLC    {
		$current.merge(this_LC_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_1_3()); 
    }
    this_ExprOr_4=ruleExprOr    {
		$current.merge(this_ExprOr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleExprOr
entryRuleExprOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrRule()); } 
	 iv_ruleExprOr=ruleExprOr 
	 { $current=$iv_ruleExprOr.current.getText(); }  
	 EOF 
;

// Rule ExprOr
ruleExprOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_0()); 
    }
    this_ExprNot_0=ruleExprNot    {
		$current.merge(this_ExprNot_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); 
    }
    this_LC_1=ruleLC    {
		$current.merge(this_LC_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprOrAccess().getOrKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); 
    }
    this_LC_3=ruleLC    {
		$current.merge(this_LC_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_1_3()); 
    }
    this_ExprNot_4=ruleExprNot    {
		$current.merge(this_ExprNot_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleExprNot
entryRuleExprNot returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprNotRule()); } 
	 iv_ruleExprNot=ruleExprNot 
	 { $current=$iv_ruleExprNot.current.getText(); }  
	 EOF 
;

// Rule ExprNot
ruleExprNot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprNotAccess().getNotKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); 
    }
    this_LC_1=ruleLC    {
		$current.merge(this_LC_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_1()); 
    }
    this_ExprEq_2=ruleExprEq    {
		$current.merge(this_ExprEq_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExprEq
entryRuleExprEq returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprEqRule()); } 
	 iv_ruleExprEq=ruleExprEq 
	 { $current=$iv_ruleExprEq.current.getText(); }  
	 EOF 
;

// Rule ExprEq
ruleExprEq returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_0()); 
    }
    this_ExprSimple_0=ruleExprSimple    {
		$current.merge(this_ExprSimple_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_2()); 
    }
    this_ExprSimple_2=ruleExprSimple    {
		$current.merge(this_ExprSimple_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_PARAG_3=RULE_PARAG    {
		$current.merge(this_PARAG_3);
    }

    { 
    newLeafNode(this_PARAG_3, grammarAccess.getExprEqAccess().getPARAGTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExprEqAccess().getExprParserRuleCall_1_1()); 
    }
    this_Expr_4=ruleExpr    {
		$current.merge(this_Expr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_PARAD_5=RULE_PARAD    {
		$current.merge(this_PARAD_5);
    }

    { 
    newLeafNode(this_PARAD_5, grammarAccess.getExprEqAccess().getPARADTerminalRuleCall_1_2()); 
    }
))
    ;





// Entry rule entryRuleLC
entryRuleLC returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCRule()); } 
	 iv_ruleLC=ruleLC 
	 { $current=$iv_ruleLC.current.getText(); }  
	 EOF 
;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SP_0=RULE_SP    {
		$current.merge(this_SP_0);
    }

    { 
    newLeafNode(this_SP_0, grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); 
    }

    |    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); 
    }

    |    this_TAB_2=RULE_TAB    {
		$current.merge(this_TAB_2);
    }

    { 
    newLeafNode(this_TAB_2, grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); 
    }

    |    this_LF_3=RULE_LF    {
		$current.merge(this_LF_3);
    }

    { 
    newLeafNode(this_LF_3, grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); 
    }
)?
    ;





RULE_VAR : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_SYM : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('a'..'z'|'A'..'Z'|'0'..'9')+)* ('?'|'!');

RULE_PARAG : '(';

RULE_PARAD : ')';

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


