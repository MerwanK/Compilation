/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cProgrammeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgrammeProgrammeParserRuleCall_0 = (RuleCall)cProgrammeAssignment.eContents().get(0);
		
		/// *Merwan Kaf et Maxime Servais * / Model:
		//	programme=Programme;
		@Override public ParserRule getRule() { return rule; }

		//programme=Programme
		public Assignment getProgrammeAssignment() { return cProgrammeAssignment; }

		//Programme
		public RuleCall getProgrammeProgrammeParserRuleCall_0() { return cProgrammeProgrammeParserRuleCall_0; }
	}

	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Programme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFonctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// * Syntaxe des programmes * / / * Integre def dans fuction pour interpretation du noeud
		// * identificateur LC
		// * Donner des noms (command etc)
		// * / Programme:
		//	(Fonction CR*)*;
		@Override public ParserRule getRule() { return rule; }

		//(Fonction CR*)*
		public Group getGroup() { return cGroup; }

		//Fonction
		public RuleCall getFonctionParserRuleCall_0() { return cFonctionParserRuleCall_0; }

		//CR*
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }
	}

	public class FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFonctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSYMTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cReadKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cInputParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cPercentSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cCommandesParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cPercentSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cWriteKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cLCParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cOutputParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//Fonction:
		//	"fonction" LC SYM ":" LC "read" LC Input "%" Commandes "%" "write" LC Output;
		@Override public ParserRule getRule() { return rule; }

		//"fonction" LC SYM ":" LC "read" LC Input "%" Commandes "%" "write" LC Output
		public Group getGroup() { return cGroup; }

		//"fonction"
		public Keyword getFonctionKeyword_0() { return cFonctionKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//SYM
		public RuleCall getSYMTerminalRuleCall_2() { return cSYMTerminalRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//LC
		public RuleCall getLCParserRuleCall_4() { return cLCParserRuleCall_4; }

		//"read"
		public Keyword getReadKeyword_5() { return cReadKeyword_5; }

		//LC
		public RuleCall getLCParserRuleCall_6() { return cLCParserRuleCall_6; }

		//Input
		public RuleCall getInputParserRuleCall_7() { return cInputParserRuleCall_7; }

		//"%"
		public Keyword getPercentSignKeyword_8() { return cPercentSignKeyword_8; }

		//Commandes
		public RuleCall getCommandesParserRuleCall_9() { return cCommandesParserRuleCall_9; }

		//"%"
		public Keyword getPercentSignKeyword_10() { return cPercentSignKeyword_10; }

		//"write"
		public Keyword getWriteKeyword_11() { return cWriteKeyword_11; }

		//LC
		public RuleCall getLCParserRuleCall_12() { return cLCParserRuleCall_12; }

		//Output
		public RuleCall getOutputParserRuleCall_13() { return cOutputParserRuleCall_13; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Input:
		//	VAR ("," VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//VAR ("," VAR)*
		public Group getGroup() { return cGroup; }

		//VAR
		public RuleCall getVARTerminalRuleCall_0() { return cVARTerminalRuleCall_0; }

		//("," VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//VAR
		public RuleCall getVARTerminalRuleCall_1_1() { return cVARTerminalRuleCall_1_1; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Output:
		//	VAR ("," VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//VAR ("," VAR)*
		public Group getGroup() { return cGroup; }

		//VAR
		public RuleCall getVARTerminalRuleCall_0() { return cVARTerminalRuleCall_0; }

		//("," VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//VAR
		public RuleCall getVARTerminalRuleCall_1_1() { return cVARTerminalRuleCall_1_1; }
	}

	public class CommandesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commandes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCommandeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * Syntaxe des commandes * / Commandes:
		//	Commande (";" Commande)*;
		@Override public ParserRule getRule() { return rule; }

		//Commande (";" Commande)*
		public Group getGroup() { return cGroup; }

		//Commande
		public RuleCall getCommandeParserRuleCall_0() { return cCommandeParserRuleCall_0; }

		//(";" Commande)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//Commande
		public RuleCall getCommandeParserRuleCall_1_1() { return cCommandeParserRuleCall_1_1; }
	}

	public class CommandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commande");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cWhileKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cForKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cLCParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cDoKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cLCParserRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final RuleCall cCommandesParserRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final RuleCall cLCParserRuleCall_2_7 = (RuleCall)cGroup_2.eContents().get(7);
		private final Keyword cOdKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cThenKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final RuleCall cLCParserRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final RuleCall cCommandesParserRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		private final RuleCall cLCParserRuleCall_3_7 = (RuleCall)cGroup_3.eContents().get(7);
		private final Group cGroup_3_8 = (Group)cGroup_3.eContents().get(8);
		private final Keyword cElseKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3_8_1 = (RuleCall)cGroup_3_8.eContents().get(1);
		private final RuleCall cCommandesParserRuleCall_3_8_2 = (RuleCall)cGroup_3_8.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3_8_3 = (RuleCall)cGroup_3_8.eContents().get(3);
		private final Keyword cFiKeyword_3_9 = (Keyword)cGroup_3.eContents().get(9);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cForeachKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cLCParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cExprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cLCParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cInKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cLCParserRuleCall_4_5 = (RuleCall)cGroup_4.eContents().get(5);
		private final RuleCall cExprParserRuleCall_4_6 = (RuleCall)cGroup_4.eContents().get(6);
		private final RuleCall cLCParserRuleCall_4_7 = (RuleCall)cGroup_4.eContents().get(7);
		private final Keyword cDoKeyword_4_8 = (Keyword)cGroup_4.eContents().get(8);
		private final RuleCall cLCParserRuleCall_4_9 = (RuleCall)cGroup_4.eContents().get(9);
		private final RuleCall cCommandesParserRuleCall_4_10 = (RuleCall)cGroup_4.eContents().get(10);
		private final RuleCall cLCParserRuleCall_4_11 = (RuleCall)cGroup_4.eContents().get(11);
		private final Keyword cOdKeyword_4_12 = (Keyword)cGroup_4.eContents().get(12);
		
		//Commande:
		//	"nop" | Vars ":=" Exprs | ("while" | "for") LC Expr LC "do" LC Commandes LC "od" | "if" LC Expr LC "then" LC
		//	Commandes LC ("else" LC Commandes LC)? "fi" | "foreach" LC Expr LC "in" LC Expr LC "do" LC Commandes LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"nop" | Vars ":=" Exprs | ("while" | "for") LC Expr LC "do" LC Commandes LC "od" | "if" LC Expr LC "then" LC Commandes
		//LC ("else" LC Commandes LC)? "fi" | "foreach" LC Expr LC "in" LC Expr LC "do" LC Commandes LC "od"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nop"
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }

		//Vars ":=" Exprs
		public Group getGroup_1() { return cGroup_1; }

		//Vars
		public RuleCall getVarsParserRuleCall_1_0() { return cVarsParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//Exprs
		public RuleCall getExprsParserRuleCall_1_2() { return cExprsParserRuleCall_1_2; }

		//("while" | "for") LC Expr LC "do" LC Commandes LC "od"
		public Group getGroup_2() { return cGroup_2; }

		//"while" | "for"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"while"
		public Keyword getWhileKeyword_2_0_0() { return cWhileKeyword_2_0_0; }

		//"for"
		public Keyword getForKeyword_2_0_1() { return cForKeyword_2_0_1; }

		//LC
		public RuleCall getLCParserRuleCall_2_1() { return cLCParserRuleCall_2_1; }

		//Expr
		public RuleCall getExprParserRuleCall_2_2() { return cExprParserRuleCall_2_2; }

		//LC
		public RuleCall getLCParserRuleCall_2_3() { return cLCParserRuleCall_2_3; }

		//"do"
		public Keyword getDoKeyword_2_4() { return cDoKeyword_2_4; }

		//LC
		public RuleCall getLCParserRuleCall_2_5() { return cLCParserRuleCall_2_5; }

		//Commandes
		public RuleCall getCommandesParserRuleCall_2_6() { return cCommandesParserRuleCall_2_6; }

		//LC
		public RuleCall getLCParserRuleCall_2_7() { return cLCParserRuleCall_2_7; }

		//"od"
		public Keyword getOdKeyword_2_8() { return cOdKeyword_2_8; }

		//"if" LC Expr LC "then" LC Commandes LC ("else" LC Commandes LC)? "fi"
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//LC
		public RuleCall getLCParserRuleCall_3_1() { return cLCParserRuleCall_3_1; }

		//Expr
		public RuleCall getExprParserRuleCall_3_2() { return cExprParserRuleCall_3_2; }

		//LC
		public RuleCall getLCParserRuleCall_3_3() { return cLCParserRuleCall_3_3; }

		//"then"
		public Keyword getThenKeyword_3_4() { return cThenKeyword_3_4; }

		//LC
		public RuleCall getLCParserRuleCall_3_5() { return cLCParserRuleCall_3_5; }

		//Commandes
		public RuleCall getCommandesParserRuleCall_3_6() { return cCommandesParserRuleCall_3_6; }

		//LC
		public RuleCall getLCParserRuleCall_3_7() { return cLCParserRuleCall_3_7; }

		//("else" LC Commandes LC)?
		public Group getGroup_3_8() { return cGroup_3_8; }

		//"else"
		public Keyword getElseKeyword_3_8_0() { return cElseKeyword_3_8_0; }

		//LC
		public RuleCall getLCParserRuleCall_3_8_1() { return cLCParserRuleCall_3_8_1; }

		//Commandes
		public RuleCall getCommandesParserRuleCall_3_8_2() { return cCommandesParserRuleCall_3_8_2; }

		//LC
		public RuleCall getLCParserRuleCall_3_8_3() { return cLCParserRuleCall_3_8_3; }

		//"fi"
		public Keyword getFiKeyword_3_9() { return cFiKeyword_3_9; }

		//"foreach" LC Expr LC "in" LC Expr LC "do" LC Commandes LC "od"
		public Group getGroup_4() { return cGroup_4; }

		//"foreach"
		public Keyword getForeachKeyword_4_0() { return cForeachKeyword_4_0; }

		//LC
		public RuleCall getLCParserRuleCall_4_1() { return cLCParserRuleCall_4_1; }

		//Expr
		public RuleCall getExprParserRuleCall_4_2() { return cExprParserRuleCall_4_2; }

		//LC
		public RuleCall getLCParserRuleCall_4_3() { return cLCParserRuleCall_4_3; }

		//"in"
		public Keyword getInKeyword_4_4() { return cInKeyword_4_4; }

		//LC
		public RuleCall getLCParserRuleCall_4_5() { return cLCParserRuleCall_4_5; }

		//Expr
		public RuleCall getExprParserRuleCall_4_6() { return cExprParserRuleCall_4_6; }

		//LC
		public RuleCall getLCParserRuleCall_4_7() { return cLCParserRuleCall_4_7; }

		//"do"
		public Keyword getDoKeyword_4_8() { return cDoKeyword_4_8; }

		//LC
		public RuleCall getLCParserRuleCall_4_9() { return cLCParserRuleCall_4_9; }

		//Commandes
		public RuleCall getCommandesParserRuleCall_4_10() { return cCommandesParserRuleCall_4_10; }

		//LC
		public RuleCall getLCParserRuleCall_4_11() { return cLCParserRuleCall_4_11; }

		//"od"
		public Keyword getOdKeyword_4_12() { return cOdKeyword_4_12; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Vars:
		//	VAR ("," VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//VAR ("," VAR)*
		public Group getGroup() { return cGroup; }

		//VAR
		public RuleCall getVARTerminalRuleCall_0() { return cVARTerminalRuleCall_0; }

		//("," VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//VAR
		public RuleCall getVARTerminalRuleCall_1_1() { return cVARTerminalRuleCall_1_1; }
	}

	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * EXPRESSIONS SIMPLE ET EXPRESSIONS LOGIQUES * / Exprs:
		//	Expr ("," Expr)*;
		@Override public ParserRule getRule() { return rule; }

		//Expr ("," Expr)*
		public Group getGroup() { return cGroup; }

		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//("," Expr)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expr:
		//	ExprAnd | ExprSimple;
		@Override public ParserRule getRule() { return rule; }

		//ExprAnd | ExprSimple
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_1() { return cExprSimpleParserRuleCall_1; }
	}

	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cPARAGTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cPARADTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPARAGTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cPARADTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cPARAGTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cLCParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cExprParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final RuleCall cPARADTerminalRuleCall_5_4 = (RuleCall)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cPARAGTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cLCParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final RuleCall cExprParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final RuleCall cPARADTerminalRuleCall_6_4 = (RuleCall)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cPARAGTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cSYMTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final RuleCall cPARADTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		
		//ExprSimple:
		//	"nil" | VAR | SYM | PARAG "cons" LExpr PARAD | PARAG "list" LExpr PARAD | PARAG "hd" LC Expr PARAD | PARAG "tl" LC
		//	Expr PARAD | PARAG SYM LExpr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//"nil" | VAR | SYM | PARAG "cons" LExpr PARAD | PARAG "list" LExpr PARAD | PARAG "hd" LC Expr PARAD | PARAG "tl" LC Expr
		//PARAD | PARAG SYM LExpr PARAD
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nil"
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }

		//VAR
		public RuleCall getVARTerminalRuleCall_1() { return cVARTerminalRuleCall_1; }

		//SYM
		public RuleCall getSYMTerminalRuleCall_2() { return cSYMTerminalRuleCall_2; }

		//PARAG "cons" LExpr PARAD
		public Group getGroup_3() { return cGroup_3; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_3_0() { return cPARAGTerminalRuleCall_3_0; }

		//"cons"
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }

		//LExpr
		public RuleCall getLExprParserRuleCall_3_2() { return cLExprParserRuleCall_3_2; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_3_3() { return cPARADTerminalRuleCall_3_3; }

		//PARAG "list" LExpr PARAD
		public Group getGroup_4() { return cGroup_4; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_4_0() { return cPARAGTerminalRuleCall_4_0; }

		//"list"
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }

		//LExpr
		public RuleCall getLExprParserRuleCall_4_2() { return cLExprParserRuleCall_4_2; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_4_3() { return cPARADTerminalRuleCall_4_3; }

		//PARAG "hd" LC Expr PARAD
		public Group getGroup_5() { return cGroup_5; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_5_0() { return cPARAGTerminalRuleCall_5_0; }

		//"hd"
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }

		//LC
		public RuleCall getLCParserRuleCall_5_2() { return cLCParserRuleCall_5_2; }

		//Expr
		public RuleCall getExprParserRuleCall_5_3() { return cExprParserRuleCall_5_3; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_5_4() { return cPARADTerminalRuleCall_5_4; }

		//PARAG "tl" LC Expr PARAD
		public Group getGroup_6() { return cGroup_6; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_6_0() { return cPARAGTerminalRuleCall_6_0; }

		//"tl"
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }

		//LC
		public RuleCall getLCParserRuleCall_6_2() { return cLCParserRuleCall_6_2; }

		//Expr
		public RuleCall getExprParserRuleCall_6_3() { return cExprParserRuleCall_6_3; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_6_4() { return cPARADTerminalRuleCall_6_4; }

		//PARAG SYM LExpr PARAD
		public Group getGroup_7() { return cGroup_7; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_7_0() { return cPARAGTerminalRuleCall_7_0; }

		//SYM
		public RuleCall getSYMTerminalRuleCall_7_1() { return cSYMTerminalRuleCall_7_1; }

		//LExpr
		public RuleCall getLExprParserRuleCall_7_2() { return cLExprParserRuleCall_7_2; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_7_3() { return cPARADTerminalRuleCall_7_3; }
	}

	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LExpr:
		//	(LC Expr)+;
		@Override public ParserRule getRule() { return rule; }

		//(LC Expr)+
		public Group getGroup() { return cGroup; }

		//LC
		public RuleCall getLCParserRuleCall_0() { return cLCParserRuleCall_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprOrParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprAnd:
		//	ExprOr (LC "and" LC ExprOr)*;
		@Override public ParserRule getRule() { return rule; }

		//ExprOr (LC "and" LC ExprOr)*
		public Group getGroup() { return cGroup; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }

		//(LC "and" LC ExprOr)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall_1_3() { return cExprOrParserRuleCall_1_3; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprNotParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprOr:
		//	ExprNot (LC "or" LC ExprNot)*;
		@Override public ParserRule getRule() { return rule; }

		//ExprNot (LC "or" LC ExprNot)*
		public Group getGroup() { return cGroup; }

		//ExprNot
		public RuleCall getExprNotParserRuleCall_0() { return cExprNotParserRuleCall_0; }

		//(LC "or" LC ExprNot)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//ExprNot
		public RuleCall getExprNotParserRuleCall_1_3() { return cExprNotParserRuleCall_1_3; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExprEqParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExprNot:
		//	("not" LC)? ExprEq;
		@Override public ParserRule getRule() { return rule; }

		//("not" LC)? ExprEq
		public Group getGroup() { return cGroup; }

		//("not" LC)?
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }

		//ExprEq
		public RuleCall getExprEqParserRuleCall_1() { return cExprEqParserRuleCall_1; }
	}

	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPARADTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	ExprSimple "=?" ExprSimple | PARAG Expr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//ExprSimple "=?" ExprSimple | PARAG Expr PARAD
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprSimple "=?" ExprSimple
		public Group getGroup_0() { return cGroup_0; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_0() { return cExprSimpleParserRuleCall_0_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_2() { return cExprSimpleParserRuleCall_0_2; }

		//PARAG Expr PARAD
		public Group getGroup_1() { return cGroup_1; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_1_0() { return cPARAGTerminalRuleCall_1_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_1_2() { return cPARADTerminalRuleCall_1_2; }
	}

	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// * UNITES LEXICALES * / / * Comme nous n'utilisons pas Ponctuation nous le laissons en commentaire
		//Ponctuation :
		//	PONCT|PARAG|PARAD;	
		//	terminal PONCT : (','|';'|':');
		// * / LC:
		//	(SP | CR | TAB | LF)?;
		@Override public ParserRule getRule() { return rule; }

		//(SP | CR | TAB | LF)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//SP
		public RuleCall getSPTerminalRuleCall_0() { return cSPTerminalRuleCall_0; }

		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }

		//TAB
		public RuleCall getTABTerminalRuleCall_2() { return cTABTerminalRuleCall_2; }

		//LF
		public RuleCall getLFTerminalRuleCall_3() { return cLFTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final ProgrammeElements pProgramme;
	private final FonctionElements pFonction;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandesElements pCommandes;
	private final CommandeElements pCommande;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final LExprElements pLExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final LCElements pLC;
	private final TerminalRule tVAR;
	private final TerminalRule tSYM;
	private final TerminalRule tCONF;
	private final TerminalRule tPARAG;
	private final TerminalRule tPARAD;
	private final TerminalRule tSP;
	private final TerminalRule tCR;
	private final TerminalRule tTAB;
	private final TerminalRule tLF;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgramme = new ProgrammeElements();
		this.pFonction = new FonctionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommandes = new CommandesElements();
		this.pCommande = new CommandeElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLExpr = new LExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pLC = new LCElements();
		this.tVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VAR");
		this.tSYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYM");
		this.tCONF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONF");
		this.tPARAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAG");
		this.tPARAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAD");
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SP");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CR");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *Merwan Kaf et Maxime Servais * / Model:
	//	programme=Programme;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// * Syntaxe des programmes * / / * Integre def dans fuction pour interpretation du noeud
	// * identificateur LC
	// * Donner des noms (command etc)
	// * / Programme:
	//	(Fonction CR*)*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}

	//Fonction:
	//	"fonction" LC SYM ":" LC "read" LC Input "%" Commandes "%" "write" LC Output;
	public FonctionElements getFonctionAccess() {
		return pFonction;
	}
	
	public ParserRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}

	//Input:
	//	VAR ("," VAR)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	VAR ("," VAR)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	/// * Syntaxe des commandes * / Commandes:
	//	Commande (";" Commande)*;
	public CommandesElements getCommandesAccess() {
		return pCommandes;
	}
	
	public ParserRule getCommandesRule() {
		return getCommandesAccess().getRule();
	}

	//Commande:
	//	"nop" | Vars ":=" Exprs | ("while" | "for") LC Expr LC "do" LC Commandes LC "od" | "if" LC Expr LC "then" LC
	//	Commandes LC ("else" LC Commandes LC)? "fi" | "foreach" LC Expr LC "in" LC Expr LC "do" LC Commandes LC "od";
	public CommandeElements getCommandeAccess() {
		return pCommande;
	}
	
	public ParserRule getCommandeRule() {
		return getCommandeAccess().getRule();
	}

	//Vars:
	//	VAR ("," VAR)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	/// * EXPRESSIONS SIMPLE ET EXPRESSIONS LOGIQUES * / Exprs:
	//	Expr ("," Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}

	//Expr:
	//	ExprAnd | ExprSimple;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprSimple:
	//	"nil" | VAR | SYM | PARAG "cons" LExpr PARAD | PARAG "list" LExpr PARAD | PARAG "hd" LC Expr PARAD | PARAG "tl" LC
	//	Expr PARAD | PARAG SYM LExpr PARAD;
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}

	//LExpr:
	//	(LC Expr)+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}

	//ExprAnd:
	//	ExprOr (LC "and" LC ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprOr:
	//	ExprNot (LC "or" LC ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprNot:
	//	("not" LC)? ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	//ExprEq:
	//	ExprSimple "=?" ExprSimple | PARAG Expr PARAD;
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}

	/// * UNITES LEXICALES * / / * Comme nous n'utilisons pas Ponctuation nous le laissons en commentaire
	//Ponctuation :
	//	PONCT|PARAG|PARAD;	
	//	terminal PONCT : (','|';'|':');
	// * / LC:
	//	(SP | CR | TAB | LF)?;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}

	//terminal VAR:
	//	"A".."Z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getVARRule() {
		return tVAR;
	} 

	//terminal SYM:
	//	"a".."z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getSYMRule() {
		return tSYM;
	} 

	//terminal CONF:
	//	(("-" | "+" | "." | "/" | "_" | "&" | "->") ("a".."z" | "A".."Z" | "0".."9")+)* ("?" | "!");
	public TerminalRule getCONFRule() {
		return tCONF;
	} 

	//terminal PARAG:
	//	"(";
	public TerminalRule getPARAGRule() {
		return tPARAG;
	} 

	//terminal PARAD:
	//	")";
	public TerminalRule getPARADRule() {
		return tPARAD;
	} 

	//terminal SP:
	//	" ";
	public TerminalRule getSPRule() {
		return tSP;
	} 

	//terminal CR:
	//	"\n";
	public TerminalRule getCRRule() {
		return tCR;
	} 

	//terminal TAB:
	//	"\t";
	public TerminalRule getTABRule() {
		return tTAB;
	} 

	//terminal LF:
	//	"\r";
	public TerminalRule getLFRule() {
		return tLF;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
