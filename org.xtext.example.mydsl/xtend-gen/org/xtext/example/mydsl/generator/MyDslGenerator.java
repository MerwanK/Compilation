/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Commande;
import org.xtext.example.mydsl.myDsl.Commandes;
import org.xtext.example.mydsl.myDsl.Fonction;
import org.xtext.example.mydsl.myDsl.Input;
import org.xtext.example.mydsl.myDsl.Output;
import org.xtext.example.mydsl.myDsl.Programme;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Programme> _filter = Iterables.<Programme>filter(_iterable, Programme.class);
    for (final Programme p : _filter) {
      CharSequence _compile = this.compile(p);
      fsa.generateFile("pp.whpp", _compile);
    }
  }
  
  public CharSequence compile(final Programme p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Fonction> _fonct = p.getFonct();
      for(final Fonction f : _fonct) {
        CharSequence _compile = this.compile(f);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Fonction f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("fonction ");
    String _symbole = f.getSymbole();
    _builder.append(_symbole, "");
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("read ");
    Input _in = f.getIn();
    CharSequence _compile = this.compile(_in);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    Commandes _com = f.getCom();
    CharSequence _compile_1 = this.compile(_com);
    _builder.append(_compile_1, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    Output _out = f.getOut();
    CharSequence _compile_2 = this.compile(_out);
    _builder.append(_compile_2, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Input i) {
    StringConcatenation _builder = new StringConcatenation();
    String _var1 = i.getVar1();
    _builder.append(_var1, "");
    {
      EList<String> _var2 = i.getVar2();
      for(final String v : _var2) {
        _builder.append(", ");
        _builder.append(v, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Output o) {
    StringConcatenation _builder = new StringConcatenation();
    String _var1 = o.getVar1();
    _builder.append(_var1, "");
    {
      EList<String> _var2 = o.getVar2();
      for(final String v : _var2) {
        _builder.append(", ");
        _builder.append(v, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Commandes cos) {
    StringConcatenation _builder = new StringConcatenation();
    Commande _com1 = cos.getCom1();
    CharSequence _compile = this.compile(_com1);
    _builder.append(_compile, "");
    {
      EList<Commande> _com2 = cos.getCom2();
      for(final Commande v : _com2) {
        _builder.append(", ");
        CharSequence _compile_1 = this.compile(v);
        _builder.append(_compile_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Commande co) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("nop");
    _builder.newLine();
    return _builder;
  }
}
