/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandeAccess().getAlternatives(), "rule__Commande__Alternatives");
					put(grammarAccess.getCommandeAccess().getAlternatives_2_0(), "rule__Commande__Alternatives_2_0");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
					put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
					put(grammarAccess.getLCAccess().getAlternatives(), "rule__LC__Alternatives");
					put(grammarAccess.getProgrammeAccess().getGroup(), "rule__Programme__Group__0");
					put(grammarAccess.getProgrammeAccess().getGroup_1(), "rule__Programme__Group_1__0");
					put(grammarAccess.getFonctionAccess().getGroup(), "rule__Fonction__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
					put(grammarAccess.getCommandesAccess().getGroup(), "rule__Commandes__Group__0");
					put(grammarAccess.getCommandesAccess().getGroup_1(), "rule__Commandes__Group_1__0");
					put(grammarAccess.getCommandeAccess().getGroup_0(), "rule__Commande__Group_0__0");
					put(grammarAccess.getCommandeAccess().getGroup_1(), "rule__Commande__Group_1__0");
					put(grammarAccess.getCommandeAccess().getGroup_2(), "rule__Commande__Group_2__0");
					put(grammarAccess.getCommandeAccess().getGroup_3(), "rule__Commande__Group_3__0");
					put(grammarAccess.getCommandeAccess().getGroup_3_8(), "rule__Commande__Group_3_8__0");
					put(grammarAccess.getCommandeAccess().getGroup_4(), "rule__Commande__Group_4__0");
					put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
					put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
					put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
					put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_0(), "rule__ExprSimple__Group_0__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_6(), "rule__ExprSimple__Group_6__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_7(), "rule__ExprSimple__Group_7__0");
					put(grammarAccess.getLExprAccess().getGroup(), "rule__LExpr__Group__0");
					put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
					put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
					put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
					put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
					put(grammarAccess.getExprNotAccess().getGroup(), "rule__ExprNot__Group__0");
					put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
					put(grammarAccess.getModelAccess().getProgrammeAssignment(), "rule__Model__ProgrammeAssignment");
					put(grammarAccess.getProgrammeAccess().getFonctAssignment_1_0(), "rule__Programme__FonctAssignment_1_0");
					put(grammarAccess.getFonctionAccess().getSymboleAssignment_2(), "rule__Fonction__SymboleAssignment_2");
					put(grammarAccess.getFonctionAccess().getInAssignment_7(), "rule__Fonction__InAssignment_7");
					put(grammarAccess.getFonctionAccess().getComAssignment_9(), "rule__Fonction__ComAssignment_9");
					put(grammarAccess.getFonctionAccess().getOutAssignment_13(), "rule__Fonction__OutAssignment_13");
					put(grammarAccess.getInputAccess().getVar1Assignment_0(), "rule__Input__Var1Assignment_0");
					put(grammarAccess.getInputAccess().getVar2Assignment_1_1(), "rule__Input__Var2Assignment_1_1");
					put(grammarAccess.getOutputAccess().getVar1Assignment_0(), "rule__Output__Var1Assignment_0");
					put(grammarAccess.getOutputAccess().getVar2Assignment_1_1(), "rule__Output__Var2Assignment_1_1");
					put(grammarAccess.getCommandesAccess().getCom1Assignment_0(), "rule__Commandes__Com1Assignment_0");
					put(grammarAccess.getCommandesAccess().getCom2Assignment_1_1(), "rule__Commandes__Com2Assignment_1_1");
					put(grammarAccess.getCommandeAccess().getVarAssignment_1_0(), "rule__Commande__VarAssignment_1_0");
					put(grammarAccess.getCommandeAccess().getExpAssignment_1_2(), "rule__Commande__ExpAssignment_1_2");
					put(grammarAccess.getCommandeAccess().getExp2Assignment_2_2(), "rule__Commande__Exp2Assignment_2_2");
					put(grammarAccess.getCommandeAccess().getComAssignment_2_6(), "rule__Commande__ComAssignment_2_6");
					put(grammarAccess.getCommandeAccess().getExp3Assignment_3_2(), "rule__Commande__Exp3Assignment_3_2");
					put(grammarAccess.getCommandeAccess().getCom2Assignment_3_6(), "rule__Commande__Com2Assignment_3_6");
					put(grammarAccess.getCommandeAccess().getCom3Assignment_3_8_2(), "rule__Commande__Com3Assignment_3_8_2");
					put(grammarAccess.getCommandeAccess().getExp4Assignment_4_2(), "rule__Commande__Exp4Assignment_4_2");
					put(grammarAccess.getCommandeAccess().getExp5Assignment_4_6(), "rule__Commande__Exp5Assignment_4_6");
					put(grammarAccess.getCommandeAccess().getCom4Assignment_4_10(), "rule__Commande__Com4Assignment_4_10");
					put(grammarAccess.getVarsAccess().getVar1Assignment_0(), "rule__Vars__Var1Assignment_0");
					put(grammarAccess.getVarsAccess().getVar2Assignment_1_1(), "rule__Vars__Var2Assignment_1_1");
					put(grammarAccess.getExprsAccess().getExp1Assignment_0(), "rule__Exprs__Exp1Assignment_0");
					put(grammarAccess.getExprsAccess().getExp2Assignment_1_1(), "rule__Exprs__Exp2Assignment_1_1");
					put(grammarAccess.getExprAccess().getExpAAssignment_0(), "rule__Expr__ExpAAssignment_0");
					put(grammarAccess.getExprAccess().getExpSAssignment_1(), "rule__Expr__ExpSAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getVarAssignment_1(), "rule__ExprSimple__VarAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getSymboleAssignment_2(), "rule__ExprSimple__SymboleAssignment_2");
					put(grammarAccess.getExprSimpleAccess().getLeAssignment_3_2(), "rule__ExprSimple__LeAssignment_3_2");
					put(grammarAccess.getExprSimpleAccess().getLe2Assignment_4_2(), "rule__ExprSimple__Le2Assignment_4_2");
					put(grammarAccess.getExprSimpleAccess().getLe3Assignment_5_3(), "rule__ExprSimple__Le3Assignment_5_3");
					put(grammarAccess.getExprSimpleAccess().getLe4Assignment_6_3(), "rule__ExprSimple__Le4Assignment_6_3");
					put(grammarAccess.getExprSimpleAccess().getLe5Assignment_7_2(), "rule__ExprSimple__Le5Assignment_7_2");
					put(grammarAccess.getLExprAccess().getExpAssignment_1(), "rule__LExpr__ExpAssignment_1");
					put(grammarAccess.getExprAndAccess().getExpOAssignment_0(), "rule__ExprAnd__ExpOAssignment_0");
					put(grammarAccess.getExprAndAccess().getExpO2Assignment_1_3(), "rule__ExprAnd__ExpO2Assignment_1_3");
					put(grammarAccess.getExprOrAccess().getExpNAssignment_0(), "rule__ExprOr__ExpNAssignment_0");
					put(grammarAccess.getExprOrAccess().getExpN2Assignment_1_3(), "rule__ExprOr__ExpN2Assignment_1_3");
					put(grammarAccess.getExprNotAccess().getExpEqAssignment_1(), "rule__ExprNot__ExpEqAssignment_1");
					put(grammarAccess.getExprEqAccess().getExpSAssignment_0_0(), "rule__ExprEq__ExpSAssignment_0_0");
					put(grammarAccess.getExprEqAccess().getExpS2Assignment_0_2(), "rule__ExprEq__ExpS2Assignment_0_2");
					put(grammarAccess.getExprEqAccess().getExpAssignment_1_1(), "rule__ExprEq__ExpAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
