/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cProgrammeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgrammeProgrammeParserRuleCall_0 = (RuleCall)cProgrammeAssignment.eContents().get(0);
		
		/// *Merwan Kaf et Maxime Servasisi * / Model:
		//	programme=Programme;
		@Override public ParserRule getRule() { return rule; }

		//programme=Programme
		public Assignment getProgrammeAssignment() { return cProgrammeAssignment; }

		//Programme
		public RuleCall getProgrammeProgrammeParserRuleCall_0() { return cProgrammeProgrammeParserRuleCall_0; }
	}

	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Programme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgrammeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFonctAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFonctFonctionParserRuleCall_1_0_0 = (RuleCall)cFonctAssignment_1_0.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * Syntaxe des programmes * / / * Integre def dans fuction pour interpretation du noeud
		// * identificateur LC
		// * Donner des noms (command etc)
		// * / Programme:
		//	{Programme} (fonct+=Fonction CR*)*;
		@Override public ParserRule getRule() { return rule; }

		//{Programme} (fonct+=Fonction CR*)*
		public Group getGroup() { return cGroup; }

		//{Programme}
		public Action getProgrammeAction_0() { return cProgrammeAction_0; }

		//(fonct+=Fonction CR*)*
		public Group getGroup_1() { return cGroup_1; }

		//fonct+=Fonction
		public Assignment getFonctAssignment_1_0() { return cFonctAssignment_1_0; }

		//Fonction
		public RuleCall getFonctFonctionParserRuleCall_1_0_0() { return cFonctFonctionParserRuleCall_1_0_0; }

		//CR*
		public RuleCall getCRTerminalRuleCall_1_1() { return cCRTerminalRuleCall_1_1; }
	}

	public class FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFonctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSymboleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSymboleSYMTerminalRuleCall_2_0 = (RuleCall)cSymboleAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cReadKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cInAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInInputParserRuleCall_7_0 = (RuleCall)cInAssignment_7.eContents().get(0);
		private final Keyword cPercentSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cComAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cComCommandesParserRuleCall_9_0 = (RuleCall)cComAssignment_9.eContents().get(0);
		private final Keyword cPercentSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cWriteKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cLCParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Assignment cOutAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cOutOutputParserRuleCall_13_0 = (RuleCall)cOutAssignment_13.eContents().get(0);
		
		//Fonction:
		//	"fonction" LC symbole=SYM ":" LC "read" LC in=Input "%" com=Commandes "%" "write" LC out=Output;
		@Override public ParserRule getRule() { return rule; }

		//"fonction" LC symbole=SYM ":" LC "read" LC in=Input "%" com=Commandes "%" "write" LC out=Output
		public Group getGroup() { return cGroup; }

		//"fonction"
		public Keyword getFonctionKeyword_0() { return cFonctionKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//symbole=SYM
		public Assignment getSymboleAssignment_2() { return cSymboleAssignment_2; }

		//SYM
		public RuleCall getSymboleSYMTerminalRuleCall_2_0() { return cSymboleSYMTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//LC
		public RuleCall getLCParserRuleCall_4() { return cLCParserRuleCall_4; }

		//"read"
		public Keyword getReadKeyword_5() { return cReadKeyword_5; }

		//LC
		public RuleCall getLCParserRuleCall_6() { return cLCParserRuleCall_6; }

		//in=Input
		public Assignment getInAssignment_7() { return cInAssignment_7; }

		//Input
		public RuleCall getInInputParserRuleCall_7_0() { return cInInputParserRuleCall_7_0; }

		//"%"
		public Keyword getPercentSignKeyword_8() { return cPercentSignKeyword_8; }

		//com=Commandes
		public Assignment getComAssignment_9() { return cComAssignment_9; }

		//Commandes
		public RuleCall getComCommandesParserRuleCall_9_0() { return cComCommandesParserRuleCall_9_0; }

		//"%"
		public Keyword getPercentSignKeyword_10() { return cPercentSignKeyword_10; }

		//"write"
		public Keyword getWriteKeyword_11() { return cWriteKeyword_11; }

		//LC
		public RuleCall getLCParserRuleCall_12() { return cLCParserRuleCall_12; }

		//out=Output
		public Assignment getOutAssignment_13() { return cOutAssignment_13; }

		//Output
		public RuleCall getOutOutputParserRuleCall_13_0() { return cOutOutputParserRuleCall_13_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1VARTerminalRuleCall_0_0 = (RuleCall)cVar1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVar2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVar2VARTerminalRuleCall_1_1_0 = (RuleCall)cVar2Assignment_1_1.eContents().get(0);
		
		//Input:
		//	var1=VAR ("," var2+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//var1=VAR ("," var2+=VAR)*
		public Group getGroup() { return cGroup; }

		//var1=VAR
		public Assignment getVar1Assignment_0() { return cVar1Assignment_0; }

		//VAR
		public RuleCall getVar1VARTerminalRuleCall_0_0() { return cVar1VARTerminalRuleCall_0_0; }

		//("," var2+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//var2+=VAR
		public Assignment getVar2Assignment_1_1() { return cVar2Assignment_1_1; }

		//VAR
		public RuleCall getVar2VARTerminalRuleCall_1_1_0() { return cVar2VARTerminalRuleCall_1_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1VARTerminalRuleCall_0_0 = (RuleCall)cVar1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVar2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVar2VARTerminalRuleCall_1_1_0 = (RuleCall)cVar2Assignment_1_1.eContents().get(0);
		
		//Output:
		//	var1=VAR ("," var2+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//var1=VAR ("," var2+=VAR)*
		public Group getGroup() { return cGroup; }

		//var1=VAR
		public Assignment getVar1Assignment_0() { return cVar1Assignment_0; }

		//VAR
		public RuleCall getVar1VARTerminalRuleCall_0_0() { return cVar1VARTerminalRuleCall_0_0; }

		//("," var2+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//var2+=VAR
		public Assignment getVar2Assignment_1_1() { return cVar2Assignment_1_1; }

		//VAR
		public RuleCall getVar2VARTerminalRuleCall_1_1_0() { return cVar2VARTerminalRuleCall_1_1_0; }
	}

	public class CommandesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commandes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCom1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCom1CommandeParserRuleCall_0_0 = (RuleCall)cCom1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCom2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCom2CommandeParserRuleCall_1_1_0 = (RuleCall)cCom2Assignment_1_1.eContents().get(0);
		
		/// * Syntaxe des commandes * / Commandes:
		//	com1=Commande (";" com2+=Commande)*;
		@Override public ParserRule getRule() { return rule; }

		//com1=Commande (";" com2+=Commande)*
		public Group getGroup() { return cGroup; }

		//com1=Commande
		public Assignment getCom1Assignment_0() { return cCom1Assignment_0; }

		//Commande
		public RuleCall getCom1CommandeParserRuleCall_0_0() { return cCom1CommandeParserRuleCall_0_0; }

		//(";" com2+=Commande)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//com2+=Commande
		public Assignment getCom2Assignment_1_1() { return cCom2Assignment_1_1; }

		//Commande
		public RuleCall getCom2CommandeParserRuleCall_1_1_0() { return cCom2CommandeParserRuleCall_1_1_0; }
	}

	public class CommandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commande");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNopAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNopNopKeyword_0_1_0 = (Keyword)cNopAssignment_0_1.eContents().get(0);
		private final Assignment cAffectVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAffectVarAffectVarParserRuleCall_1_0 = (RuleCall)cAffectVarAssignment_1.eContents().get(0);
		private final Assignment cWhileCAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWhileCWhileParserRuleCall_2_0 = (RuleCall)cWhileCAssignment_2.eContents().get(0);
		private final Assignment cForCAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cForCForParserRuleCall_3_0 = (RuleCall)cForCAssignment_3.eContents().get(0);
		private final Assignment cIfCAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIfCIfParserRuleCall_4_0 = (RuleCall)cIfCAssignment_4.eContents().get(0);
		private final Assignment cForeachCAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForeachCForeachParserRuleCall_5_0 = (RuleCall)cForeachCAssignment_5.eContents().get(0);
		
		//Commande:
		//	{Commande} nop="nop" | affectVar=AffectVar | whileC=While | forC=For | ifC=If | foreachC=Foreach;
		@Override public ParserRule getRule() { return rule; }

		//{Commande} nop="nop" | affectVar=AffectVar | whileC=While | forC=For | ifC=If | foreachC=Foreach
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Commande} nop="nop"
		public Group getGroup_0() { return cGroup_0; }

		//{Commande}
		public Action getCommandeAction_0_0() { return cCommandeAction_0_0; }

		//nop="nop"
		public Assignment getNopAssignment_0_1() { return cNopAssignment_0_1; }

		//"nop"
		public Keyword getNopNopKeyword_0_1_0() { return cNopNopKeyword_0_1_0; }

		//affectVar=AffectVar
		public Assignment getAffectVarAssignment_1() { return cAffectVarAssignment_1; }

		//AffectVar
		public RuleCall getAffectVarAffectVarParserRuleCall_1_0() { return cAffectVarAffectVarParserRuleCall_1_0; }

		//whileC=While
		public Assignment getWhileCAssignment_2() { return cWhileCAssignment_2; }

		//While
		public RuleCall getWhileCWhileParserRuleCall_2_0() { return cWhileCWhileParserRuleCall_2_0; }

		//forC=For
		public Assignment getForCAssignment_3() { return cForCAssignment_3; }

		//For
		public RuleCall getForCForParserRuleCall_3_0() { return cForCForParserRuleCall_3_0; }

		//ifC=If
		public Assignment getIfCAssignment_4() { return cIfCAssignment_4; }

		//If
		public RuleCall getIfCIfParserRuleCall_4_0() { return cIfCIfParserRuleCall_4_0; }

		//foreachC=Foreach
		public Assignment getForeachCAssignment_5() { return cForeachCAssignment_5; }

		//Foreach
		public RuleCall getForeachCForeachParserRuleCall_5_0() { return cForeachCForeachParserRuleCall_5_0; }
	}

	public class AffectVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AffectVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1VarsParserRuleCall_0_0 = (RuleCall)cVar1Assignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprsParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//AffectVar:
		//	var1=Vars ":=" exp=Exprs;
		@Override public ParserRule getRule() { return rule; }

		//var1=Vars ":=" exp=Exprs
		public Group getGroup() { return cGroup; }

		//var1=Vars
		public Assignment getVar1Assignment_0() { return cVar1Assignment_0; }

		//Vars
		public RuleCall getVar1VarsParserRuleCall_0_0() { return cVar1VarsParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//exp=Exprs
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Exprs
		public RuleCall getExpExprsParserRuleCall_2_0() { return cExpExprsParserRuleCall_2_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp2ExprParserRuleCall_2_0 = (RuleCall)cExp2Assignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCom3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCom3CommandesParserRuleCall_6_0 = (RuleCall)cCom3Assignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//While:
		//	"while" LC exp2=Expr LC "do" LC com3=Commandes LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"while" LC exp2=Expr LC "do" LC com3=Commandes LC "od"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//exp2=Expr
		public Assignment getExp2Assignment_2() { return cExp2Assignment_2; }

		//Expr
		public RuleCall getExp2ExprParserRuleCall_2_0() { return cExp2ExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//com3=Commandes
		public Assignment getCom3Assignment_6() { return cCom3Assignment_6; }

		//Commandes
		public RuleCall getCom3CommandesParserRuleCall_6_0() { return cCom3CommandesParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"od"
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExp3Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp3ExprParserRuleCall_2_0 = (RuleCall)cExp3Assignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCom4Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCom4CommandesParserRuleCall_6_0 = (RuleCall)cCom4Assignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//For:
		//	"for" LC exp3=Expr LC "do" LC com4=Commandes LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"for" LC exp3=Expr LC "do" LC com4=Commandes LC "od"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//exp3=Expr
		public Assignment getExp3Assignment_2() { return cExp3Assignment_2; }

		//Expr
		public RuleCall getExp3ExprParserRuleCall_2_0() { return cExp3ExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//com4=Commandes
		public Assignment getCom4Assignment_6() { return cCom4Assignment_6; }

		//Commandes
		public RuleCall getCom4CommandesParserRuleCall_6_0() { return cCom4CommandesParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"od"
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExp4Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp4ExprParserRuleCall_2_0 = (RuleCall)cExp4Assignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCom5Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCom5CommandesParserRuleCall_6_0 = (RuleCall)cCom5Assignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cLCParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cCom6Assignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cCom6CommandesParserRuleCall_8_2_0 = (RuleCall)cCom6Assignment_8_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final Keyword cFiKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//If:
		//	"if" LC exp4=Expr LC "then" LC com5=Commandes LC ("else" LC com6=Commandes LC)? "fi";
		@Override public ParserRule getRule() { return rule; }

		//"if" LC exp4=Expr LC "then" LC com5=Commandes LC ("else" LC com6=Commandes LC)? "fi"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//exp4=Expr
		public Assignment getExp4Assignment_2() { return cExp4Assignment_2; }

		//Expr
		public RuleCall getExp4ExprParserRuleCall_2_0() { return cExp4ExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//com5=Commandes
		public Assignment getCom5Assignment_6() { return cCom5Assignment_6; }

		//Commandes
		public RuleCall getCom5CommandesParserRuleCall_6_0() { return cCom5CommandesParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//("else" LC com6=Commandes LC)?
		public Group getGroup_8() { return cGroup_8; }

		//"else"
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }

		//LC
		public RuleCall getLCParserRuleCall_8_1() { return cLCParserRuleCall_8_1; }

		//com6=Commandes
		public Assignment getCom6Assignment_8_2() { return cCom6Assignment_8_2; }

		//Commandes
		public RuleCall getCom6CommandesParserRuleCall_8_2_0() { return cCom6CommandesParserRuleCall_8_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_8_3() { return cLCParserRuleCall_8_3; }

		//"fi"
		public Keyword getFiKeyword_9() { return cFiKeyword_9; }
	}

	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExp5Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp5ExprParserRuleCall_2_0 = (RuleCall)cExp5Assignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cExp6Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExp6ExprParserRuleCall_6_0 = (RuleCall)cExp6Assignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCom7Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCom7CommandesParserRuleCall_10_0 = (RuleCall)cCom7Assignment_10.eContents().get(0);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cOdKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Foreach:
		//	"foreach" LC exp5=Expr LC "in" LC exp6=Expr LC "do" LC com7=Commandes LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"foreach" LC exp5=Expr LC "in" LC exp6=Expr LC "do" LC com7=Commandes LC "od"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//exp5=Expr
		public Assignment getExp5Assignment_2() { return cExp5Assignment_2; }

		//Expr
		public RuleCall getExp5ExprParserRuleCall_2_0() { return cExp5ExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//exp6=Expr
		public Assignment getExp6Assignment_6() { return cExp6Assignment_6; }

		//Expr
		public RuleCall getExp6ExprParserRuleCall_6_0() { return cExp6ExprParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"do"
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }

		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }

		//com7=Commandes
		public Assignment getCom7Assignment_10() { return cCom7Assignment_10; }

		//Commandes
		public RuleCall getCom7CommandesParserRuleCall_10_0() { return cCom7CommandesParserRuleCall_10_0; }

		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }

		//"od"
		public Keyword getOdKeyword_12() { return cOdKeyword_12; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar2Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar2VARTerminalRuleCall_0_0 = (RuleCall)cVar2Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVar3Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVar3VARTerminalRuleCall_1_1_0 = (RuleCall)cVar3Assignment_1_1.eContents().get(0);
		
		//Vars:
		//	var2=VAR ("," var3+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//var2=VAR ("," var3+=VAR)*
		public Group getGroup() { return cGroup; }

		//var2=VAR
		public Assignment getVar2Assignment_0() { return cVar2Assignment_0; }

		//VAR
		public RuleCall getVar2VARTerminalRuleCall_0_0() { return cVar2VARTerminalRuleCall_0_0; }

		//("," var3+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//var3+=VAR
		public Assignment getVar3Assignment_1_1() { return cVar3Assignment_1_1; }

		//VAR
		public RuleCall getVar3VARTerminalRuleCall_1_1_0() { return cVar3VARTerminalRuleCall_1_1_0; }
	}

	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSExprParserRuleCall_0_0 = (RuleCall)cExprSAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprS2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprS2ExprParserRuleCall_1_1_0 = (RuleCall)cExprS2Assignment_1_1.eContents().get(0);
		
		/// * EXPRESSIONS SIMPLE ET EXPRESSIONS LOGIQUES * / Exprs:
		//	exprS=Expr ("," exprS2+=Expr)*;
		@Override public ParserRule getRule() { return rule; }

		//exprS=Expr ("," exprS2+=Expr)*
		public Group getGroup() { return cGroup; }

		//exprS=Expr
		public Assignment getExprSAssignment_0() { return cExprSAssignment_0; }

		//Expr
		public RuleCall getExprSExprParserRuleCall_0_0() { return cExprSExprParserRuleCall_0_0; }

		//("," exprS2+=Expr)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//exprS2+=Expr
		public Assignment getExprS2Assignment_1_1() { return cExprS2Assignment_1_1; }

		//Expr
		public RuleCall getExprS2ExprParserRuleCall_1_1_0() { return cExprS2ExprParserRuleCall_1_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpSExprSimpleParserRuleCall_0_0 = (RuleCall)cExpSAssignment_0.eContents().get(0);
		private final Assignment cExpAAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpAExprAndParserRuleCall_1_0 = (RuleCall)cExpAAssignment_1.eContents().get(0);
		
		//Expr:
		//	expS=ExprSimple | expA=ExprAnd;
		@Override public ParserRule getRule() { return rule; }

		//expS=ExprSimple | expA=ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//expS=ExprSimple
		public Assignment getExpSAssignment_0() { return cExpSAssignment_0; }

		//ExprSimple
		public RuleCall getExpSExprSimpleParserRuleCall_0_0() { return cExpSExprSimpleParserRuleCall_0_0; }

		//expA=ExprAnd
		public Assignment getExpAAssignment_1() { return cExpAAssignment_1; }

		//ExprAnd
		public RuleCall getExpAExprAndParserRuleCall_1_0() { return cExpAExprAndParserRuleCall_1_0; }
	}

	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprSimpleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVideAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cVideNilKeyword_0_1_0 = (Keyword)cVideAssignment_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVARTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cSymboleAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSymboleSYMTerminalRuleCall_2_0 = (RuleCall)cSymboleAssignment_2.eContents().get(0);
		private final Assignment cConsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConsConsParserRuleCall_3_0 = (RuleCall)cConsAssignment_3.eContents().get(0);
		private final Assignment cListeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListeListeParserRuleCall_4_0 = (RuleCall)cListeAssignment_4.eContents().get(0);
		private final Assignment cHdAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cHdHdParserRuleCall_5_0 = (RuleCall)cHdAssignment_5.eContents().get(0);
		private final Assignment cTlAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cTlTlParserRuleCall_6_0 = (RuleCall)cTlAssignment_6.eContents().get(0);
		private final Assignment cSymbolExAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cSymbolExSymboleExParserRuleCall_7_0 = (RuleCall)cSymbolExAssignment_7.eContents().get(0);
		
		//ExprSimple:
		//	{ExprSimple} vide="nil" | variable=VAR | symbole=SYM | cons=Cons | liste=Liste | hd=Hd | tl=Tl | symbolEx=SymboleEx;
		@Override public ParserRule getRule() { return rule; }

		//{ExprSimple} vide="nil" | variable=VAR | symbole=SYM | cons=Cons | liste=Liste | hd=Hd | tl=Tl | symbolEx=SymboleEx
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprSimple} vide="nil"
		public Group getGroup_0() { return cGroup_0; }

		//{ExprSimple}
		public Action getExprSimpleAction_0_0() { return cExprSimpleAction_0_0; }

		//vide="nil"
		public Assignment getVideAssignment_0_1() { return cVideAssignment_0_1; }

		//"nil"
		public Keyword getVideNilKeyword_0_1_0() { return cVideNilKeyword_0_1_0; }

		//variable=VAR
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VAR
		public RuleCall getVariableVARTerminalRuleCall_1_0() { return cVariableVARTerminalRuleCall_1_0; }

		//symbole=SYM
		public Assignment getSymboleAssignment_2() { return cSymboleAssignment_2; }

		//SYM
		public RuleCall getSymboleSYMTerminalRuleCall_2_0() { return cSymboleSYMTerminalRuleCall_2_0; }

		//cons=Cons
		public Assignment getConsAssignment_3() { return cConsAssignment_3; }

		//Cons
		public RuleCall getConsConsParserRuleCall_3_0() { return cConsConsParserRuleCall_3_0; }

		//liste=Liste
		public Assignment getListeAssignment_4() { return cListeAssignment_4; }

		//Liste
		public RuleCall getListeListeParserRuleCall_4_0() { return cListeListeParserRuleCall_4_0; }

		//hd=Hd
		public Assignment getHdAssignment_5() { return cHdAssignment_5; }

		//Hd
		public RuleCall getHdHdParserRuleCall_5_0() { return cHdHdParserRuleCall_5_0; }

		//tl=Tl
		public Assignment getTlAssignment_6() { return cTlAssignment_6; }

		//Tl
		public RuleCall getTlTlParserRuleCall_6_0() { return cTlTlParserRuleCall_6_0; }

		//symbolEx=SymboleEx
		public Assignment getSymbolExAssignment_7() { return cSymbolExAssignment_7; }

		//SymboleEx
		public RuleCall getSymbolExSymboleExParserRuleCall_7_0() { return cSymbolExSymboleExParserRuleCall_7_0; }
	}

	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLe1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLe1LExprParserRuleCall_2_0 = (RuleCall)cLe1Assignment_2.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Cons:
		//	PARAG "cons" le1=LExpr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//PARAG "cons" le1=LExpr PARAD
		public Group getGroup() { return cGroup; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_0() { return cPARAGTerminalRuleCall_0; }

		//"cons"
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }

		//le1=LExpr
		public Assignment getLe1Assignment_2() { return cLe1Assignment_2; }

		//LExpr
		public RuleCall getLe1LExprParserRuleCall_2_0() { return cLe1LExprParserRuleCall_2_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_3() { return cPARADTerminalRuleCall_3; }
	}

	public class ListeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Liste");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cListKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLe2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLe2LExprParserRuleCall_2_0 = (RuleCall)cLe2Assignment_2.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Liste:
		//	PARAG "list" le2=LExpr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//PARAG "list" le2=LExpr PARAD
		public Group getGroup() { return cGroup; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_0() { return cPARAGTerminalRuleCall_0; }

		//"list"
		public Keyword getListKeyword_1() { return cListKeyword_1; }

		//le2=LExpr
		public Assignment getLe2Assignment_2() { return cLe2Assignment_2; }

		//LExpr
		public RuleCall getLe2LExprParserRuleCall_2_0() { return cLe2LExprParserRuleCall_2_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_3() { return cPARADTerminalRuleCall_3; }
	}

	public class HdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cLe3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLe3ExprParserRuleCall_3_0 = (RuleCall)cLe3Assignment_3.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Hd:
		//	PARAG "hd" LC le3=Expr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//PARAG "hd" LC le3=Expr PARAD
		public Group getGroup() { return cGroup; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_0() { return cPARAGTerminalRuleCall_0; }

		//"hd"
		public Keyword getHdKeyword_1() { return cHdKeyword_1; }

		//LC
		public RuleCall getLCParserRuleCall_2() { return cLCParserRuleCall_2; }

		//le3=Expr
		public Assignment getLe3Assignment_3() { return cLe3Assignment_3; }

		//Expr
		public RuleCall getLe3ExprParserRuleCall_3_0() { return cLe3ExprParserRuleCall_3_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_4() { return cPARADTerminalRuleCall_4; }
	}

	public class TlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cTlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cLe4Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLe4ExprParserRuleCall_3_0 = (RuleCall)cLe4Assignment_3.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Tl:
		//	PARAG "tl" LC le4=Expr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//PARAG "tl" LC le4=Expr PARAD
		public Group getGroup() { return cGroup; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_0() { return cPARAGTerminalRuleCall_0; }

		//"tl"
		public Keyword getTlKeyword_1() { return cTlKeyword_1; }

		//LC
		public RuleCall getLCParserRuleCall_2() { return cLCParserRuleCall_2; }

		//le4=Expr
		public Assignment getLe4Assignment_3() { return cLe4Assignment_3; }

		//Expr
		public RuleCall getLe4ExprParserRuleCall_3_0() { return cLe4ExprParserRuleCall_3_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_4() { return cPARADTerminalRuleCall_4; }
	}

	public class SymboleExElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymboleEx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPSYMTerminalRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Assignment cLe5Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLe5LExprParserRuleCall_2_0 = (RuleCall)cLe5Assignment_2.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SymboleEx:
		//	PARAG p=SYM le5=LExpr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//PARAG p=SYM le5=LExpr PARAD
		public Group getGroup() { return cGroup; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_0() { return cPARAGTerminalRuleCall_0; }

		//p=SYM
		public Assignment getPAssignment_1() { return cPAssignment_1; }

		//SYM
		public RuleCall getPSYMTerminalRuleCall_1_0() { return cPSYMTerminalRuleCall_1_0; }

		//le5=LExpr
		public Assignment getLe5Assignment_2() { return cLe5Assignment_2; }

		//LExpr
		public RuleCall getLe5LExprParserRuleCall_2_0() { return cLe5LExprParserRuleCall_2_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_3() { return cPARADTerminalRuleCall_3; }
	}

	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpLeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpLeExprParserRuleCall_1_0 = (RuleCall)cExpLeAssignment_1.eContents().get(0);
		
		//LExpr:
		//	(LC expLe+=Expr)+;
		@Override public ParserRule getRule() { return rule; }

		//(LC expLe+=Expr)+
		public Group getGroup() { return cGroup; }

		//LC
		public RuleCall getLCParserRuleCall_0() { return cLCParserRuleCall_0; }

		//expLe+=Expr
		public Assignment getExpLeAssignment_1() { return cExpLeAssignment_1; }

		//Expr
		public RuleCall getExpLeExprParserRuleCall_1_0() { return cExpLeExprParserRuleCall_1_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpOAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpOExprOrParserRuleCall_0_0 = (RuleCall)cExpOAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cExpO2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpO2ExprOrParserRuleCall_1_3_0 = (RuleCall)cExpO2Assignment_1_3.eContents().get(0);
		
		//ExprAnd:
		//	expO=ExprOr (LC "and" LC expO2+=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }

		//expO=ExprOr (LC "and" LC expO2+=ExprOr)*
		public Group getGroup() { return cGroup; }

		//expO=ExprOr
		public Assignment getExpOAssignment_0() { return cExpOAssignment_0; }

		//ExprOr
		public RuleCall getExpOExprOrParserRuleCall_0_0() { return cExpOExprOrParserRuleCall_0_0; }

		//(LC "and" LC expO2+=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//expO2+=ExprOr
		public Assignment getExpO2Assignment_1_3() { return cExpO2Assignment_1_3; }

		//ExprOr
		public RuleCall getExpO2ExprOrParserRuleCall_1_3_0() { return cExpO2ExprOrParserRuleCall_1_3_0; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpNExprNotParserRuleCall_0_0 = (RuleCall)cExpNAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cExpN2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpN2ExprNotParserRuleCall_1_3_0 = (RuleCall)cExpN2Assignment_1_3.eContents().get(0);
		
		//ExprOr:
		//	expN=ExprNot (LC "or" LC expN2+=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }

		//expN=ExprNot (LC "or" LC expN2+=ExprNot)*
		public Group getGroup() { return cGroup; }

		//expN=ExprNot
		public Assignment getExpNAssignment_0() { return cExpNAssignment_0; }

		//ExprNot
		public RuleCall getExpNExprNotParserRuleCall_0_0() { return cExpNExprNotParserRuleCall_0_0; }

		//(LC "or" LC expN2+=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//expN2+=ExprNot
		public Assignment getExpN2Assignment_1_3() { return cExpN2Assignment_1_3; }

		//ExprNot
		public RuleCall getExpN2ExprNotParserRuleCall_1_3_0() { return cExpN2ExprNotParserRuleCall_1_3_0; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprNotNotAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprNotNotExprNotNotParserRuleCall_0_0 = (RuleCall)cExprNotNotAssignment_0.eContents().get(0);
		private final Assignment cExprNotDoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprNotDoExprNotDoParserRuleCall_1_0 = (RuleCall)cExprNotDoAssignment_1.eContents().get(0);
		
		//ExprNot:
		//	exprNotNot=ExprNotNot | exprNotDo=ExprNotDo;
		@Override public ParserRule getRule() { return rule; }

		//exprNotNot=ExprNotNot | exprNotDo=ExprNotDo
		public Alternatives getAlternatives() { return cAlternatives; }

		//exprNotNot=ExprNotNot
		public Assignment getExprNotNotAssignment_0() { return cExprNotNotAssignment_0; }

		//ExprNotNot
		public RuleCall getExprNotNotExprNotNotParserRuleCall_0_0() { return cExprNotNotExprNotNotParserRuleCall_0_0; }

		//exprNotDo=ExprNotDo
		public Assignment getExprNotDoAssignment_1() { return cExprNotDoAssignment_1; }

		//ExprNotDo
		public RuleCall getExprNotDoExprNotDoParserRuleCall_1_0() { return cExprNotDoExprNotDoParserRuleCall_1_0; }
	}

	public class ExprNotNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNotNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpEq1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpEq1ExprEqParserRuleCall_1_0 = (RuleCall)cExpEq1Assignment_1.eContents().get(0);
		
		//ExprNotNot:
		//	("not" LC) expEq1=ExprEq;
		@Override public ParserRule getRule() { return rule; }

		//("not" LC) expEq1=ExprEq
		public Group getGroup() { return cGroup; }

		//"not" LC
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }

		//expEq1=ExprEq
		public Assignment getExpEq1Assignment_1() { return cExpEq1Assignment_1; }

		//ExprEq
		public RuleCall getExpEq1ExprEqParserRuleCall_1_0() { return cExpEq1ExprEqParserRuleCall_1_0; }
	}

	public class ExprNotDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNotDo");
		private final Assignment cExpEq2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpEq2ExprEqParserRuleCall_0 = (RuleCall)cExpEq2Assignment.eContents().get(0);
		
		//ExprNotDo:
		//	expEq2=ExprEq;
		@Override public ParserRule getRule() { return rule; }

		//expEq2=ExprEq
		public Assignment getExpEq2Assignment() { return cExpEq2Assignment; }

		//ExprEq
		public RuleCall getExpEq2ExprEqParserRuleCall_0() { return cExpEq2ExprEqParserRuleCall_0; }
	}

	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpS1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpS1ExprSimpleParserRuleCall_0_0_0 = (RuleCall)cExpS1Assignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpS2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpS2ExprSimpleParserRuleCall_0_2_0 = (RuleCall)cExpS2Assignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPARAGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpRAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpRExprParserRuleCall_1_1_0 = (RuleCall)cExpRAssignment_1_1.eContents().get(0);
		private final RuleCall cPARADTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	expS1=ExprSimple "=?" expS2=ExprSimple | PARAG expR=Expr PARAD;
		@Override public ParserRule getRule() { return rule; }

		//expS1=ExprSimple "=?" expS2=ExprSimple | PARAG expR=Expr PARAD
		public Alternatives getAlternatives() { return cAlternatives; }

		//expS1=ExprSimple "=?" expS2=ExprSimple
		public Group getGroup_0() { return cGroup_0; }

		//expS1=ExprSimple
		public Assignment getExpS1Assignment_0_0() { return cExpS1Assignment_0_0; }

		//ExprSimple
		public RuleCall getExpS1ExprSimpleParserRuleCall_0_0_0() { return cExpS1ExprSimpleParserRuleCall_0_0_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }

		//expS2=ExprSimple
		public Assignment getExpS2Assignment_0_2() { return cExpS2Assignment_0_2; }

		//ExprSimple
		public RuleCall getExpS2ExprSimpleParserRuleCall_0_2_0() { return cExpS2ExprSimpleParserRuleCall_0_2_0; }

		//PARAG expR=Expr PARAD
		public Group getGroup_1() { return cGroup_1; }

		//PARAG
		public RuleCall getPARAGTerminalRuleCall_1_0() { return cPARAGTerminalRuleCall_1_0; }

		//expR=Expr
		public Assignment getExpRAssignment_1_1() { return cExpRAssignment_1_1; }

		//Expr
		public RuleCall getExpRExprParserRuleCall_1_1_0() { return cExpRExprParserRuleCall_1_1_0; }

		//PARAD
		public RuleCall getPARADTerminalRuleCall_1_2() { return cPARADTerminalRuleCall_1_2; }
	}

	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// * UNITES LEXICALES * / / * Comme nous n'utilisons pas Ponctuation nous le laissons en commentaire
		//Ponctuation :
		//	PONCT|PARAG|PARAD;	
		//	terminal PONCT : (','|';'|':');
		// * / LC:
		//	(SP | CR | TAB | LF)*;
		@Override public ParserRule getRule() { return rule; }

		//(SP | CR | TAB | LF)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//SP
		public RuleCall getSPTerminalRuleCall_0() { return cSPTerminalRuleCall_0; }

		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }

		//TAB
		public RuleCall getTABTerminalRuleCall_2() { return cTABTerminalRuleCall_2; }

		//LF
		public RuleCall getLFTerminalRuleCall_3() { return cLFTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final ProgrammeElements pProgramme;
	private final FonctionElements pFonction;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandesElements pCommandes;
	private final CommandeElements pCommande;
	private final AffectVarElements pAffectVar;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final ConsElements pCons;
	private final ListeElements pListe;
	private final HdElements pHd;
	private final TlElements pTl;
	private final SymboleExElements pSymboleEx;
	private final LExprElements pLExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprNotNotElements pExprNotNot;
	private final ExprNotDoElements pExprNotDo;
	private final ExprEqElements pExprEq;
	private final LCElements pLC;
	private final TerminalRule tVAR;
	private final TerminalRule tSYM;
	private final TerminalRule tCONF;
	private final TerminalRule tPARAG;
	private final TerminalRule tPARAD;
	private final TerminalRule tSP;
	private final TerminalRule tCR;
	private final TerminalRule tTAB;
	private final TerminalRule tLF;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgramme = new ProgrammeElements();
		this.pFonction = new FonctionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommandes = new CommandesElements();
		this.pCommande = new CommandeElements();
		this.pAffectVar = new AffectVarElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pCons = new ConsElements();
		this.pListe = new ListeElements();
		this.pHd = new HdElements();
		this.pTl = new TlElements();
		this.pSymboleEx = new SymboleExElements();
		this.pLExpr = new LExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprNotNot = new ExprNotNotElements();
		this.pExprNotDo = new ExprNotDoElements();
		this.pExprEq = new ExprEqElements();
		this.pLC = new LCElements();
		this.tVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VAR");
		this.tSYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYM");
		this.tCONF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONF");
		this.tPARAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAG");
		this.tPARAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAD");
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SP");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CR");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *Merwan Kaf et Maxime Servasisi * / Model:
	//	programme=Programme;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// * Syntaxe des programmes * / / * Integre def dans fuction pour interpretation du noeud
	// * identificateur LC
	// * Donner des noms (command etc)
	// * / Programme:
	//	{Programme} (fonct+=Fonction CR*)*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}

	//Fonction:
	//	"fonction" LC symbole=SYM ":" LC "read" LC in=Input "%" com=Commandes "%" "write" LC out=Output;
	public FonctionElements getFonctionAccess() {
		return pFonction;
	}
	
	public ParserRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}

	//Input:
	//	var1=VAR ("," var2+=VAR)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	var1=VAR ("," var2+=VAR)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	/// * Syntaxe des commandes * / Commandes:
	//	com1=Commande (";" com2+=Commande)*;
	public CommandesElements getCommandesAccess() {
		return pCommandes;
	}
	
	public ParserRule getCommandesRule() {
		return getCommandesAccess().getRule();
	}

	//Commande:
	//	{Commande} nop="nop" | affectVar=AffectVar | whileC=While | forC=For | ifC=If | foreachC=Foreach;
	public CommandeElements getCommandeAccess() {
		return pCommande;
	}
	
	public ParserRule getCommandeRule() {
		return getCommandeAccess().getRule();
	}

	//AffectVar:
	//	var1=Vars ":=" exp=Exprs;
	public AffectVarElements getAffectVarAccess() {
		return pAffectVar;
	}
	
	public ParserRule getAffectVarRule() {
		return getAffectVarAccess().getRule();
	}

	//While:
	//	"while" LC exp2=Expr LC "do" LC com3=Commandes LC "od";
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	"for" LC exp3=Expr LC "do" LC com4=Commandes LC "od";
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//If:
	//	"if" LC exp4=Expr LC "then" LC com5=Commandes LC ("else" LC com6=Commandes LC)? "fi";
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Foreach:
	//	"foreach" LC exp5=Expr LC "in" LC exp6=Expr LC "do" LC com7=Commandes LC "od";
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}

	//Vars:
	//	var2=VAR ("," var3+=VAR)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	/// * EXPRESSIONS SIMPLE ET EXPRESSIONS LOGIQUES * / Exprs:
	//	exprS=Expr ("," exprS2+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}

	//Expr:
	//	expS=ExprSimple | expA=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprSimple:
	//	{ExprSimple} vide="nil" | variable=VAR | symbole=SYM | cons=Cons | liste=Liste | hd=Hd | tl=Tl | symbolEx=SymboleEx;
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}

	//Cons:
	//	PARAG "cons" le1=LExpr PARAD;
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}

	//Liste:
	//	PARAG "list" le2=LExpr PARAD;
	public ListeElements getListeAccess() {
		return pListe;
	}
	
	public ParserRule getListeRule() {
		return getListeAccess().getRule();
	}

	//Hd:
	//	PARAG "hd" LC le3=Expr PARAD;
	public HdElements getHdAccess() {
		return pHd;
	}
	
	public ParserRule getHdRule() {
		return getHdAccess().getRule();
	}

	//Tl:
	//	PARAG "tl" LC le4=Expr PARAD;
	public TlElements getTlAccess() {
		return pTl;
	}
	
	public ParserRule getTlRule() {
		return getTlAccess().getRule();
	}

	//SymboleEx:
	//	PARAG p=SYM le5=LExpr PARAD;
	public SymboleExElements getSymboleExAccess() {
		return pSymboleEx;
	}
	
	public ParserRule getSymboleExRule() {
		return getSymboleExAccess().getRule();
	}

	//LExpr:
	//	(LC expLe+=Expr)+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}

	//ExprAnd:
	//	expO=ExprOr (LC "and" LC expO2+=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprOr:
	//	expN=ExprNot (LC "or" LC expN2+=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprNot:
	//	exprNotNot=ExprNotNot | exprNotDo=ExprNotDo;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	//ExprNotNot:
	//	("not" LC) expEq1=ExprEq;
	public ExprNotNotElements getExprNotNotAccess() {
		return pExprNotNot;
	}
	
	public ParserRule getExprNotNotRule() {
		return getExprNotNotAccess().getRule();
	}

	//ExprNotDo:
	//	expEq2=ExprEq;
	public ExprNotDoElements getExprNotDoAccess() {
		return pExprNotDo;
	}
	
	public ParserRule getExprNotDoRule() {
		return getExprNotDoAccess().getRule();
	}

	//ExprEq:
	//	expS1=ExprSimple "=?" expS2=ExprSimple | PARAG expR=Expr PARAD;
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}

	/// * UNITES LEXICALES * / / * Comme nous n'utilisons pas Ponctuation nous le laissons en commentaire
	//Ponctuation :
	//	PONCT|PARAG|PARAD;	
	//	terminal PONCT : (','|';'|':');
	// * / LC:
	//	(SP | CR | TAB | LF)*;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}

	//terminal VAR:
	//	"A".."Z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getVARRule() {
		return tVAR;
	} 

	//terminal SYM:
	//	"a".."z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getSYMRule() {
		return tSYM;
	} 

	//terminal CONF:
	//	(("-" | "+" | "." | "/" | "_" | "&" | "->") ("a".."z" | "A".."Z" | "0".."9")+)* ("?" | "!")?;
	public TerminalRule getCONFRule() {
		return tCONF;
	} 

	//terminal PARAG:
	//	"(";
	public TerminalRule getPARAGRule() {
		return tPARAG;
	} 

	//terminal PARAD:
	//	")";
	public TerminalRule getPARADRule() {
		return tPARAD;
	} 

	//terminal SP:
	//	" ";
	public TerminalRule getSPRule() {
		return tSP;
	} 

	//terminal CR:
	//	"\n";
	public TerminalRule getCRRule() {
		return tCR;
	} 

	//terminal TAB:
	//	"\t";
	public TerminalRule getTABRule() {
		return tTAB;
	} 

	////terminal NOP : 'nop'; terminal LF:
	//	"\r";
	public TerminalRule getLFRule() {
		return tLF;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
