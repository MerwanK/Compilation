/*
 * generated by Xtext
 */
 
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Programme
import org.xtext.example.mydsl.myDsl.Fonction
import org.xtext.example.mydsl.myDsl.Input
import org.xtext.example.mydsl.myDsl.Output
import org.xtext.example.mydsl.myDsl.Commandes
import org.xtext.example.mydsl.myDsl.Commande
import org.xtext.example.mydsl.myDsl.AffectVar
import org.xtext.example.mydsl.myDsl.While
import org.xtext.example.mydsl.myDsl.For
import org.xtext.example.mydsl.myDsl.If
import org.xtext.example.mydsl.myDsl.Foreach
import org.xtext.example.mydsl.myDsl.Vars
import org.xtext.example.mydsl.myDsl.Exprs
import org.xtext.example.mydsl.myDsl.Expr
import org.xtext.example.mydsl.myDsl.ExprSimple
import org.xtext.example.mydsl.myDsl.LExpr
import org.xtext.example.mydsl.myDsl.ExprAnd
import org.xtext.example.mydsl.myDsl.ExprOr
import org.xtext.example.mydsl.myDsl.ExprNot
import org.xtext.example.mydsl.myDsl.ExprEq
import org.xtext.example.mydsl.myDsl.Cons
import org.xtext.example.mydsl.myDsl.Liste
import org.xtext.example.mydsl.myDsl.Hd
import org.xtext.example.mydsl.myDsl.Tl
import org.xtext.example.mydsl.myDsl.SymboleEx
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.emf.ecore.util.EcoreUtil
import java.io.FileWriter
import java.io.BufferedWriter
import org.eclipse.xtext.resource.XtextResourceSet
import java.io.File
import org.xtext.example.mydsl.MyDslStandaloneSetup
import org.eclipse.emf.common.util.URI

/* Last */
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator implements IGenerator {
	

	private var int i_if = 3;
	private var int i_while = 3;
	private var int i_foreach = 3;
	private var int i_for = 3;
	private var String nomPP = "onEssayeVoir";
	
	var int n = 0;
	var indent = 0;
	 
	def public File generationDuPrettyPrinter(String entree, String nameWhpp,int indIf,
		int indWhile, int indForeach, int indFor,int indDefault){
			
		i_if = indIf;
		i_while = indWhile;
		i_foreach = indForeach;
		i_for = indFor;
		nomPP = nameWhpp;
		val injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		val resourceSet = injector.getInstance(XtextResourceSet);
		val uri = URI.createURI(entree);
		val xtextResource = resourceSet.getResource(uri, true);
		EcoreUtil.resolveAll(xtextResource);
		val fstream = new FileWriter(nameWhpp);
 		val buff = new BufferedWriter(fstream);
  		for(p: xtextResource.allContents.toIterable.filter(Programme))
			buff.write(p.compile().toString);
  		buff.close();
  		return new File(nameWhpp);
		
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa){
		for(p: resource.allContents.toIterable.filter(Programme)){
			fsa.generateFile(nomPP + ".whpp",p.compile()); 
		}
	}
	/* A RESOUDRE PROBLEME ALGO INDENTATION ON NE PEUT PAS FAIRE NIVEAU*TAILLE_INDENT 
	 * SI LES INDENT SONT DE TAILLES DIFFERENTES POUR CHAQUE TYPE DE COMMANDES
	 */
	
	def indentation(int taille_indent, int niveau){	
		var int cpt=niveau*taille_indent;
		var String indent = "";
		while(cpt>0){
			indent = indent + " ";
			cpt = cpt-1;
		}
		println(indent);
	}
	
	
	def compile(Programme p)'''
   		«FOR f :p.fonct»«f.compile()»
   		
   		«ENDFOR»
   '''
		
   def compile(Fonction f) '''
		fonction «f.symbole»:
		read «f.in.compile()»
		%
		«f.com.compile(indent,n)»
		%
		write «f.out.compile()»
   	'''
   
   def compile(Input i)'''
   «i.var1»«FOR v :i.var2», «v»«ENDFOR»'''
   
   def compile(Output o)'''
   «o.var1»«FOR v :o.var2», «v»«ENDFOR»'''
   
   def compile(Commandes cos,int indent, int n)'''
   «indentation(indent,n)»«cos.com1.compile(indent,n)»«FOR v :cos.com2» ; 
   «indentation(indent,n)»«v.compile(indent,n)»«ENDFOR»'''
   
   def compile(Commande co,int indent, int n)'''
   		«IF co.nop != null»nop«
   		ENDIF»«IF co.affectVar != null»«co.affectVar.compile()»«
   		ENDIF»«IF co.whileC != null»«co.whileC.compile(indent,n)»«
   		ENDIF»«IF co.forC != null»«co.forC.compile(indent,n)»«
   		ENDIF»«IF co.ifC != null»«co.ifC.compile(indent,n)»«
   		ENDIF»«IF co.foreachC != null»«co.foreachC.compile(indent,n)»«
   		ENDIF»'''	
   
     
   def compile(AffectVar av)'''
   «av.var1.compile» := «av.exp.compile»'''
   
   def compile(While w,int indent,int n)'''
   while «w.exp2.compile» do
   «w.com3.compile(i_while,n+1)»
   «indentation(indent,n)»od'''
      
   def compile(For f,int indent,int n)'''
   for «f.exp3.compile» do
   «f.com4.compile(i_for,n+1)»
   «indentation(indent,n)»od'''
   
   def compile(If ifc,int indent, int n)'''
   if «ifc.exp4.compile» then
   «ifc.com5.compile(i_if,n+1)»
   «indentation(indent,n)»else
   «ifc.com6.compile(i_if,n+1)»
   «indentation(indent,n)»fi'''
   
   def compile(Foreach fe,int indent, int n)'''
   foreach «fe.exp5.compile» in «fe.exp6.compile» do
   «fe.com7.compile(i_foreach,n+1)»
   «indentation(indent,n)»od'''
   
   def compile(Vars v)'''
   «v.var2»«FOR va :v.var3», «va»«ENDFOR»'''
   
   def compile(Exprs exps)'''
   «exps.exprS.compile »«FOR v :exps.exprS2», «v.compile»«ENDFOR»'''
   
   def compile(Expr ex)'''
   «IF ex.expA != null»«ex.expA.compile»«
   ENDIF»«IF ex.expS != null»«ex.expS.compile»«
   ENDIF»'''
   
   def compile(ExprSimple es)'''
   «IF es.vide != null»nil«
   		ENDIF»«IF es.variable != null»«es.variable»«
   		ENDIF»«IF es.symbole != null»«es.symbole»«
   		ENDIF»«IF es.cons != null»«es.cons.compile»«
   		ENDIF»«IF es.liste != null»«es.liste.compile»«
   		ENDIF»«IF es.hd != null»«es.hd.compile»«
   		ENDIF»«IF es.tl != null»«es.tl.compile»«
   		ENDIF»«IF es.symbolEx != null»«es.symbolEx.compile»«
   		ENDIF»'''
   
   def compile(Cons ce)'''
   (cons «ce.le1.compile»)'''
   
   def compile(Liste lie)'''
   (list «lie.le2.compile»)'''
   
   def compile(Hd h)'''
   (hd «h.le3.compile»)'''
   
   def compile(Tl t)'''
   (tl «t.le4.compile»)'''
   
   def compile(SymboleEx sex)'''
   («sex.p» «sex.le5.compile»)'''
   
   def compile(ExprAnd ea)'''
   «ea.expO.compile»«FOR v:ea.expO2» and «v.compile»«ENDFOR»'''
   
   def compile(ExprOr eo)'''
   «eo.expN.compile»«FOR v:eo.expN2» or «v.compile»«ENDFOR»'''
   
   def compile(ExprNot en)'''
	«(("not ") ?: ("")) + en.expEq.compile»'''
	
   def compile(ExprEq eeq)'''
	«(eeq.expS1.compile +  " =? " + eeq.expS2.compile) ?: ("(" + eeq.expR.compile + ")")»'''
   
   def compile(LExpr a)'''
   «FOR v:a.expLe»«v.compile»«ENDFOR»''' 

   
}