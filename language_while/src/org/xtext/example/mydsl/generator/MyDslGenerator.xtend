/*
 * generated by Xtext
 */
 
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.mydsl.myDsl.Programme
import org.xtext.example.mydsl.myDsl.Fonction
import org.xtext.example.mydsl.myDsl.Input
import org.xtext.example.mydsl.myDsl.Output
import org.xtext.example.mydsl.myDsl.Commandes
import org.xtext.example.mydsl.myDsl.Commande
import org.xtext.example.mydsl.myDsl.AffectVar
import org.xtext.example.mydsl.myDsl.While
import org.xtext.example.mydsl.myDsl.For
import org.xtext.example.mydsl.myDsl.If
import org.xtext.example.mydsl.myDsl.Foreach
import org.xtext.example.mydsl.myDsl.Vars
import org.xtext.example.mydsl.myDsl.Exprs
import org.xtext.example.mydsl.myDsl.Expr
import org.xtext.example.mydsl.myDsl.ExprSimple
import org.xtext.example.mydsl.myDsl.LExpr
import org.xtext.example.mydsl.myDsl.ExprAnd
import org.xtext.example.mydsl.myDsl.ExprOr
import org.xtext.example.mydsl.myDsl.ExprNot
import org.xtext.example.mydsl.myDsl.ExprEq
import org.xtext.example.mydsl.myDsl.Cons
import org.xtext.example.mydsl.myDsl.Liste
import org.xtext.example.mydsl.myDsl.Hd
import org.xtext.example.mydsl.myDsl.Tl
import org.xtext.example.mydsl.myDsl.SymboleEx
import org.xtext.example.mydsl.myDsl.ExprNotNot
import org.xtext.example.mydsl.myDsl.ExprNotDo
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.resource.XtextResourceSet
import org.xtext.example.mydsl.MyDslStandaloneSetup
import org.eclipse.emf.common.util.URI
import tableSymboles.SymbolsTable
import code3adresses.CodeGenere
import org.xtext.example.mydsl.myDsl.LExpr2

/* Last */
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator implements IGenerator {
	
	private SymbolsTable tableSymboles;
	private String fonctionEnCours;
	private CodeGenere codeG;
	private CodeGenere codeFonction;
	private int compteurRegistre;
	private int compteurCond;
	 
	def public CodeGenere getCodeGenere(){
	 	return codeG;
	 	}
	
	def public SymbolsTable getTableSymbole(){
	 	return tableSymboles;
	 	}
	 	 	
	def public void generationCode3Adresses(String entree){
		tableSymboles = new SymbolsTable();
		codeG = new CodeGenere();
		compteurCond = 0;
		compteurRegistre = 0;
		val injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		val resourceSet = injector.getInstance(XtextResourceSet);
		val uri = URI.createURI(entree);
		val xtextResource = resourceSet.getResource(uri, true);
		EcoreUtil.resolveAll(xtextResource);
  		for(p: xtextResource.allContents.toIterable.filter(Programme))
			p.compile();
	}
	
	//!!!!!!!!!!!!! NE PAS OUBLIEZ DE REMETTRE LES INIT DANS L'EXECUTABLE!!!!!!!!!!!!!!!!!!!!!!!!!!!
	override void doGenerate(Resource resource, IFileSystemAccess fsa){
		tableSymboles = new SymbolsTable();
		codeG = new CodeGenere();
		compteurCond = 0;
		compteurRegistre = 0;
		for(p: resource.allContents.toIterable.filter(Programme)){
			fsa.generateFile("sketuve.xxx",p.compile()); 
		}
  		System.out.println(codeG.toString());
	}
	
	def compile(Programme p){
   		for(Fonction f: p.fonct){
   			f.compile();
   		}
   		return codeG.toString();
    }
   
    def compile(Fonction f){ 
		fonctionEnCours = f.symbole;
		tableSymboles.putFunction(f.symbole);
		codeFonction = new CodeGenere();
		f.in.compile(codeFonction);
		f.com.compile(codeFonction);
		f.out.compile(codeFonction);
		codeG.addFonction(f.symbole,codeFonction);
	}	
   
   def compile(Input i, CodeGenere code){
   		tableSymboles.setInVariable(fonctionEnCours,i.var1);
   		code.addRead(i.var1);
   		for(String v :i.var2){
    		tableSymboles.setInVariable(fonctionEnCours,v);
    		code.addRead(v);
   		}
   }
   
   def compile(Output o, CodeGenere code){
   		tableSymboles.setOutVariable(fonctionEnCours,o.var1);
   		code.addWrite(o.var1);
   		for(String v :o.var2){
   			tableSymboles.setOutVariable(fonctionEnCours,v);
   			code.addWrite(v);	
   		}
   }
   
   def int compile(Commandes cos, CodeGenere code){
   		cos.com1.compile(code);
   		for(Commande v :cos.com2){  
   			v.compile(code);
   		}
   		return 0;
   }
   
   def compile(Commande co, CodeGenere code){
   		if(co.nop != null){
   			code.addNop();
   		}
   		if(co.affectVar != null){
   			co.affectVar.compile(code);
   		}
   		if(co.whileC != null){
   			co.whileC.compile(code);	
   		}
   		if(co.forC != null){
   			co.forC.compile(code);
   		}
   		if(co.ifC != null){
   			co.ifC.compile(code);
   		}
   		if(co.foreachC != null){
   			co.foreachC.compile(code);
   		}	
   	}
   
    def compile(AffectVar av, CodeGenere code){
  	 	av.exp.compile(code);
  	 	av.var1.compile(code);
    }

   def compile(Exprs exps, CodeGenere code){
   	    val CodeGenere codeExpr = new CodeGenere;
   		exps.exprS.compile(codeExpr);
   		var int tmp = compteurRegistre;
   		code.addExpr(codeExpr,"R"+compteurRegistre); 
   		compteurRegistre++;
   		for(Expr v :exps.exprS2){
   			 val CodeGenere codeExprs = new CodeGenere;
   			 v.compile(codeExpr);
   			 code.addExpr(codeExprs,"R"+compteurRegistre);
   			 compteurRegistre++;
   		}
   		compteurRegistre = tmp;
   }

   def compile(Vars v, CodeGenere code){
   		tableSymboles.setVariable(fonctionEnCours,v.var2);
   		var int tmp = compteurRegistre;
   		code.addAff(v.var2,"R"+compteurRegistre);
   		compteurRegistre++;
   		for(String va :v.var3){
   			tableSymboles.setVariable(fonctionEnCours,va);
   			code.addAff(va,"R"+compteurRegistre); 
   			compteurRegistre++;	
   		}
   		compteurRegistre = tmp;
   }  
   
   def compile(While w, CodeGenere code){ 
   		val CodeGenere codeWhile = new CodeGenere(); 
   		val CodeGenere codeExpr = new CodeGenere();
   		var int tmp = compteurRegistre;
   		compteurRegistre++;
   		w.exp2.compile(codeExpr);
   		code.addExpr(codeExpr,"R"+tmp);
   		w.com3.compile(codeWhile);
   		code.addWhile("R"+tmp,codeWhile);
   }
      
   def compile(For f, CodeGenere code){ 
   		val CodeGenere codeFor = new CodeGenere(); 
   		val CodeGenere codeExpr = new CodeGenere();
   		var int tmp = compteurRegistre;
   		compteurRegistre++;
   		f.exp3.compile(codeExpr);
   		code.addExpr(codeExpr,"R"+tmp);
   		f.com4.compile(codeFor);
   		code.addFor("R"+tmp,codeFor);
   }
   
   def compile(If ifc, CodeGenere code){/////////////!!!!!!!!!!!!!!!!!!!!!!!!!! Muavais codage du IF
   		val CodeGenere codeIf = new CodeGenere();
   		val CodeGenere codeElse = new CodeGenere();
   		val CodeGenere codeExpr = new CodeGenere();
   		var int tmp = compteurRegistre;
   		compteurRegistre++;
   		ifc.exp4.compile(codeExpr);
   		code.addExpr(codeExpr,"R"+tmp);
   		ifc.com5.compile(codeIf);
   		code.addIf("R"+tmp,codeIf);
   		if(ifc.com6 != null){
   			ifc.com6.compile(codeElse);
   			code.addElse(codeElse);	
   		}
   }
   
   def compile(Foreach fe, CodeGenere code){/////////////!!!!!!!!!!!! La on fait rien du tout
   		val CodeGenere codeForEach = new CodeGenere;
   		val CodeGenere codeExpr = new CodeGenere;
   		fe.exp5.compile(codeExpr);
   		fe.exp6.compile(codeExpr);
   		fe.com7.compile(codeForEach);
   }
   
   def compile(LExpr a, CodeGenere code){
   for(Expr v: a.expLe)
   		v.compile(code); 
   }
   
   def int compile(Expr ex, CodeGenere code){
   		if(ex.expA != null){
   	 		ex.expA.compile(code);
   		}
  		if(ex.expS != null){
   			ex.expS.compile(code);  
   		}
   		return 0;
   	}
   
   def compile(ExprSimple es, CodeGenere code){
   		if(es.vide != null){
   			code.addNil();
   		}
   		if(es.variable != null){
   			tableSymboles.setVariable(fonctionEnCours,es.variable);
    		code.addVariable(es.variable);		
   		}
   		if(es.symbole != null){
   			tableSymboles.setSymbol(es.symbole);
   			code.addSymbole(es.symbole);
   		}
   		if(es.cons != null){
   			val CodeGenere codeCons = new CodeGenere;
   			es.cons.compile(codeCons);
   			code.addCons(codeCons);
   		}
   		if(es.liste != null){
   			val CodeGenere codeList = new CodeGenere;
   			es.liste.compile(codeList);
   			code.addList(codeList);
   		}
   		if(es.hd != null){
   			val CodeGenere codeHead = new CodeGenere;
   			es.hd.compile(codeHead);
   			code.addHead(codeHead);
   		}
   		if(es.tl != null){
   			val CodeGenere codeTail = new CodeGenere;
   			es.tl.compile(codeTail);
   			code.addTail(codeTail);
   		}
   		if(es.symbolEx != null){
   			es.symbolEx.compile(code); //Ignorer pour l'instant
   		}
   }
   
   def compile(Cons ce, CodeGenere code){
   		ce.le1.compile(code);
   }
   
   def compile(Liste lie, CodeGenere code){
   		lie.le2.compile(code);
   }
   
   def compile(Hd h, CodeGenere code){
   		h.le3.compile(code);
   }
   
   def compile(Tl t, CodeGenere code){
   		t.le4.compile(code);
   }
   
   def compile(SymboleEx sex, CodeGenere code){
   	   	val CodeGenere codeCall = new CodeGenere;
   		sex.le5.compile(codeCall);
   		code.addCall(codeCall,sex.p);
   }
   
	def compile(LExpr2 b, CodeGenere code){
   		for(Expr v: b.expLe2){
   			val CodeGenere codeExpr = new CodeGenere;
   			v.compile(codeExpr);
   			code.addExpr(codeExpr,"R"+compteurRegistre);
   			compteurRegistre++; 
   		}
   }
   
   def compile(ExprAnd ea, CodeGenere code){
   		ea.expO.compile(code);
   		for(ExprOr v :ea.expO2){
   			v.compile(code);
   		}
   }
   
   def compile(ExprOr eo, CodeGenere code){
   		eo.expN.compile(code);
   		for(ExprNot v:eo.expN2){
   			v.compile(code);
   		}
   }
   
   def compile(ExprNot en, CodeGenere code){
		if(en.exprNotNot != null){
			en.exprNotNot.compile(code);
		}
		if(en.exprNotDo != null){
			en.exprNotDo.compile(code);
		}
	}
	
   def compile(ExprNotNot enn, CodeGenere code){
   		enn.expEq1.compile(code);
   }
   	
   def compile(ExprNotDo end, CodeGenere code){
   		end.expEq2.compile(code);
   }
   
   def compile(ExprEq eeq, CodeGenere code){
		eeq.expS1.compile(code);
		eeq.expS2.compile(code); 
		eeq.expR.compile(code);
   }


   
}