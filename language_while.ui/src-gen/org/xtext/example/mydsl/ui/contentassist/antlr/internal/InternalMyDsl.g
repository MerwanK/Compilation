/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getProgrammeAssignment()); }
(rule__Model__ProgrammeAssignment)
{ after(grammarAccess.getModelAccess().getProgrammeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgramme
entryRuleProgramme 
:
{ before(grammarAccess.getProgrammeRule()); }
	 ruleProgramme
{ after(grammarAccess.getProgrammeRule()); } 
	 EOF 
;

// Rule Programme
ruleProgramme
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgrammeAccess().getGroup()); }
(rule__Programme__Group__0)
{ after(grammarAccess.getProgrammeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFonction
entryRuleFonction 
:
{ before(grammarAccess.getFonctionRule()); }
	 ruleFonction
{ after(grammarAccess.getFonctionRule()); } 
	 EOF 
;

// Rule Fonction
ruleFonction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFonctionAccess().getGroup()); }
(rule__Fonction__Group__0)
{ after(grammarAccess.getFonctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutput
entryRuleOutput 
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputAccess().getGroup()); }
(rule__Output__Group__0)
{ after(grammarAccess.getOutputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommandes
entryRuleCommandes 
:
{ before(grammarAccess.getCommandesRule()); }
	 ruleCommandes
{ after(grammarAccess.getCommandesRule()); } 
	 EOF 
;

// Rule Commandes
ruleCommandes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandesAccess().getGroup()); }
(rule__Commandes__Group__0)
{ after(grammarAccess.getCommandesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommande
entryRuleCommande 
:
{ before(grammarAccess.getCommandeRule()); }
	 ruleCommande
{ after(grammarAccess.getCommandeRule()); } 
	 EOF 
;

// Rule Commande
ruleCommande
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandeAccess().getAlternatives()); }
(rule__Commande__Alternatives)
{ after(grammarAccess.getCommandeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAffectVar
entryRuleAffectVar 
:
{ before(grammarAccess.getAffectVarRule()); }
	 ruleAffectVar
{ after(grammarAccess.getAffectVarRule()); } 
	 EOF 
;

// Rule AffectVar
ruleAffectVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAffectVarAccess().getGroup()); }
(rule__AffectVar__Group__0)
{ after(grammarAccess.getAffectVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFor
entryRuleFor 
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAccess().getGroup()); }
(rule__For__Group__0)
{ after(grammarAccess.getForAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeach
entryRuleForeach 
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeachAccess().getGroup()); }
(rule__Foreach__Group__0)
{ after(grammarAccess.getForeachAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVars
entryRuleVars 
:
{ before(grammarAccess.getVarsRule()); }
	 ruleVars
{ after(grammarAccess.getVarsRule()); } 
	 EOF 
;

// Rule Vars
ruleVars
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarsAccess().getGroup()); }
(rule__Vars__Group__0)
{ after(grammarAccess.getVarsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprs
entryRuleExprs 
:
{ before(grammarAccess.getExprsRule()); }
	 ruleExprs
{ after(grammarAccess.getExprsRule()); } 
	 EOF 
;

// Rule Exprs
ruleExprs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprsAccess().getGroup()); }
(rule__Exprs__Group__0)
{ after(grammarAccess.getExprsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getAlternatives()); }
(rule__Expr__Alternatives)
{ after(grammarAccess.getExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSimple
entryRuleExprSimple 
:
{ before(grammarAccess.getExprSimpleRule()); }
	 ruleExprSimple
{ after(grammarAccess.getExprSimpleRule()); } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprSimpleAccess().getAlternatives()); }
(rule__ExprSimple__Alternatives)
{ after(grammarAccess.getExprSimpleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCons
entryRuleCons 
:
{ before(grammarAccess.getConsRule()); }
	 ruleCons
{ after(grammarAccess.getConsRule()); } 
	 EOF 
;

// Rule Cons
ruleCons
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConsAccess().getGroup()); }
(rule__Cons__Group__0)
{ after(grammarAccess.getConsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListe
entryRuleListe 
:
{ before(grammarAccess.getListeRule()); }
	 ruleListe
{ after(grammarAccess.getListeRule()); } 
	 EOF 
;

// Rule Liste
ruleListe
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListeAccess().getGroup()); }
(rule__Liste__Group__0)
{ after(grammarAccess.getListeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHd
entryRuleHd 
:
{ before(grammarAccess.getHdRule()); }
	 ruleHd
{ after(grammarAccess.getHdRule()); } 
	 EOF 
;

// Rule Hd
ruleHd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHdAccess().getGroup()); }
(rule__Hd__Group__0)
{ after(grammarAccess.getHdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTl
entryRuleTl 
:
{ before(grammarAccess.getTlRule()); }
	 ruleTl
{ after(grammarAccess.getTlRule()); } 
	 EOF 
;

// Rule Tl
ruleTl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTlAccess().getGroup()); }
(rule__Tl__Group__0)
{ after(grammarAccess.getTlAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymboleEx
entryRuleSymboleEx 
:
{ before(grammarAccess.getSymboleExRule()); }
	 ruleSymboleEx
{ after(grammarAccess.getSymboleExRule()); } 
	 EOF 
;

// Rule SymboleEx
ruleSymboleEx
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymboleExAccess().getGroup()); }
(rule__SymboleEx__Group__0)
{ after(grammarAccess.getSymboleExAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLExpr
entryRuleLExpr 
:
{ before(grammarAccess.getLExprRule()); }
	 ruleLExpr
{ after(grammarAccess.getLExprRule()); } 
	 EOF 
;

// Rule LExpr
ruleLExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLExprAccess().getGroup()); }
(rule__LExpr__Group__0)
{ after(grammarAccess.getLExprAccess().getGroup()); }
)
(
{ before(grammarAccess.getLExprAccess().getGroup()); }
(rule__LExpr__Group__0)*
{ after(grammarAccess.getLExprAccess().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLExpr2
entryRuleLExpr2 
:
{ before(grammarAccess.getLExpr2Rule()); }
	 ruleLExpr2
{ after(grammarAccess.getLExpr2Rule()); } 
	 EOF 
;

// Rule LExpr2
ruleLExpr2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLExpr2Access().getGroup()); }
(rule__LExpr2__Group__0)
{ after(grammarAccess.getLExpr2Access().getGroup()); }
)
(
{ before(grammarAccess.getLExpr2Access().getGroup()); }
(rule__LExpr2__Group__0)*
{ after(grammarAccess.getLExpr2Access().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprAnd
entryRuleExprAnd 
:
{ before(grammarAccess.getExprAndRule()); }
	 ruleExprAnd
{ after(grammarAccess.getExprAndRule()); } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAndAccess().getGroup()); }
(rule__ExprAnd__Group__0)
{ after(grammarAccess.getExprAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprOr
entryRuleExprOr 
:
{ before(grammarAccess.getExprOrRule()); }
	 ruleExprOr
{ after(grammarAccess.getExprOrRule()); } 
	 EOF 
;

// Rule ExprOr
ruleExprOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprOrAccess().getGroup()); }
(rule__ExprOr__Group__0)
{ after(grammarAccess.getExprOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprNot
entryRuleExprNot 
:
{ before(grammarAccess.getExprNotRule()); }
	 ruleExprNot
{ after(grammarAccess.getExprNotRule()); } 
	 EOF 
;

// Rule ExprNot
ruleExprNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprNotAccess().getAlternatives()); }
(rule__ExprNot__Alternatives)
{ after(grammarAccess.getExprNotAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprNotNot
entryRuleExprNotNot 
:
{ before(grammarAccess.getExprNotNotRule()); }
	 ruleExprNotNot
{ after(grammarAccess.getExprNotNotRule()); } 
	 EOF 
;

// Rule ExprNotNot
ruleExprNotNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprNotNotAccess().getGroup()); }
(rule__ExprNotNot__Group__0)
{ after(grammarAccess.getExprNotNotAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprNotDo
entryRuleExprNotDo 
:
{ before(grammarAccess.getExprNotDoRule()); }
	 ruleExprNotDo
{ after(grammarAccess.getExprNotDoRule()); } 
	 EOF 
;

// Rule ExprNotDo
ruleExprNotDo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprNotDoAccess().getExpEq2Assignment()); }
(rule__ExprNotDo__ExpEq2Assignment)
{ after(grammarAccess.getExprNotDoAccess().getExpEq2Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprEq
entryRuleExprEq 
:
{ before(grammarAccess.getExprEqRule()); }
	 ruleExprEq
{ after(grammarAccess.getExprEqRule()); } 
	 EOF 
;

// Rule ExprEq
ruleExprEq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprEqAccess().getAlternatives()); }
(rule__ExprEq__Alternatives)
{ after(grammarAccess.getExprEqAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLC
entryRuleLC 
:
{ before(grammarAccess.getLCRule()); }
	 ruleLC
{ after(grammarAccess.getLCRule()); } 
	 EOF 
;

// Rule LC
ruleLC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLCAccess().getAlternatives()); }
(rule__LC__Alternatives)*
{ after(grammarAccess.getLCAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Commande__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getGroup_0()); }
(rule__Commande__Group_0__0)
{ after(grammarAccess.getCommandeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCommandeAccess().getAffectVarAssignment_1()); }
(rule__Commande__AffectVarAssignment_1)
{ after(grammarAccess.getCommandeAccess().getAffectVarAssignment_1()); }
)

    |(
{ before(grammarAccess.getCommandeAccess().getWhileCAssignment_2()); }
(rule__Commande__WhileCAssignment_2)
{ after(grammarAccess.getCommandeAccess().getWhileCAssignment_2()); }
)

    |(
{ before(grammarAccess.getCommandeAccess().getForCAssignment_3()); }
(rule__Commande__ForCAssignment_3)
{ after(grammarAccess.getCommandeAccess().getForCAssignment_3()); }
)

    |(
{ before(grammarAccess.getCommandeAccess().getIfCAssignment_4()); }
(rule__Commande__IfCAssignment_4)
{ after(grammarAccess.getCommandeAccess().getIfCAssignment_4()); }
)

    |(
{ before(grammarAccess.getCommandeAccess().getForeachCAssignment_5()); }
(rule__Commande__ForeachCAssignment_5)
{ after(grammarAccess.getCommandeAccess().getForeachCAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpAAssignment_0()); }
(rule__Expr__ExpAAssignment_0)
{ after(grammarAccess.getExprAccess().getExpAAssignment_0()); }
)

    |(
{ before(grammarAccess.getExprAccess().getExpSAssignment_1()); }
(rule__Expr__ExpSAssignment_1)
{ after(grammarAccess.getExprAccess().getExpSAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getGroup_0()); }
(rule__ExprSimple__Group_0__0)
{ after(grammarAccess.getExprSimpleAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getVariableAssignment_1()); }
(rule__ExprSimple__VariableAssignment_1)
{ after(grammarAccess.getExprSimpleAccess().getVariableAssignment_1()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getSymboleAssignment_2()); }
(rule__ExprSimple__SymboleAssignment_2)
{ after(grammarAccess.getExprSimpleAccess().getSymboleAssignment_2()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getConsAssignment_3()); }
(rule__ExprSimple__ConsAssignment_3)
{ after(grammarAccess.getExprSimpleAccess().getConsAssignment_3()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getListeAssignment_4()); }
(rule__ExprSimple__ListeAssignment_4)
{ after(grammarAccess.getExprSimpleAccess().getListeAssignment_4()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getHdAssignment_5()); }
(rule__ExprSimple__HdAssignment_5)
{ after(grammarAccess.getExprSimpleAccess().getHdAssignment_5()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getTlAssignment_6()); }
(rule__ExprSimple__TlAssignment_6)
{ after(grammarAccess.getExprSimpleAccess().getTlAssignment_6()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getSymbolExAssignment_7()); }
(rule__ExprSimple__SymbolExAssignment_7)
{ after(grammarAccess.getExprSimpleAccess().getSymbolExAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExprNotNotAssignment_0()); }
(rule__ExprNot__ExprNotNotAssignment_0)
{ after(grammarAccess.getExprNotAccess().getExprNotNotAssignment_0()); }
)

    |(
{ before(grammarAccess.getExprNotAccess().getExprNotDoAssignment_1()); }
(rule__ExprNot__ExprNotDoAssignment_1)
{ after(grammarAccess.getExprNotAccess().getExprNotDoAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getGroup_0()); }
(rule__ExprEq__Group_0__0)
{ after(grammarAccess.getExprEqAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprEqAccess().getGroup_1()); }
(rule__ExprEq__Group_1__0)
{ after(grammarAccess.getExprEqAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LC__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); }
	RULE_SP
{ after(grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); }
	RULE_CR
{ after(grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
{ after(grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); }
	RULE_LF
{ after(grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Programme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programme__Group__0__Impl
	rule__Programme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Programme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgrammeAccess().getProgrammeAction_0()); }
(

)
{ after(grammarAccess.getProgrammeAccess().getProgrammeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Programme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Programme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgrammeAccess().getGroup_1()); }
(rule__Programme__Group_1__0)*
{ after(grammarAccess.getProgrammeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Programme__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programme__Group_1__0__Impl
	rule__Programme__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Programme__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgrammeAccess().getFonctAssignment_1_0()); }
(rule__Programme__FonctAssignment_1_0)
{ after(grammarAccess.getProgrammeAccess().getFonctAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Programme__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programme__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Programme__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgrammeAccess().getCRTerminalRuleCall_1_1()); }
(	RULE_CR)*
{ after(grammarAccess.getProgrammeAccess().getCRTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fonction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__0__Impl
	rule__Fonction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getFonctionKeyword_0()); }

	'fonction' 

{ after(grammarAccess.getFonctionAccess().getFonctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__1__Impl
	rule__Fonction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getFonctionAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__2__Impl
	rule__Fonction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getSymboleAssignment_2()); }
(rule__Fonction__SymboleAssignment_2)
{ after(grammarAccess.getFonctionAccess().getSymboleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__3__Impl
	rule__Fonction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getFonctionAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__4__Impl
	rule__Fonction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getLCParserRuleCall_4()); }
	ruleLC
{ after(grammarAccess.getFonctionAccess().getLCParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__5__Impl
	rule__Fonction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getReadKeyword_5()); }

	'read' 

{ after(grammarAccess.getFonctionAccess().getReadKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__6__Impl
	rule__Fonction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getLCParserRuleCall_6()); }
	ruleLC
{ after(grammarAccess.getFonctionAccess().getLCParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__7__Impl
	rule__Fonction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getInAssignment_7()); }
(rule__Fonction__InAssignment_7)
{ after(grammarAccess.getFonctionAccess().getInAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__8__Impl
	rule__Fonction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getPercentSignKeyword_8()); }

	'%' 

{ after(grammarAccess.getFonctionAccess().getPercentSignKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__9__Impl
	rule__Fonction__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getComAssignment_9()); }
(rule__Fonction__ComAssignment_9)
{ after(grammarAccess.getFonctionAccess().getComAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__10__Impl
	rule__Fonction__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getPercentSignKeyword_10()); }

	'%' 

{ after(grammarAccess.getFonctionAccess().getPercentSignKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__11__Impl
	rule__Fonction__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getWriteKeyword_11()); }

	'write' 

{ after(grammarAccess.getFonctionAccess().getWriteKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__12__Impl
	rule__Fonction__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getLCParserRuleCall_12()); }
	ruleLC
{ after(grammarAccess.getFonctionAccess().getLCParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fonction__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getOutAssignment_13()); }
(rule__Fonction__OutAssignment_13)
{ after(grammarAccess.getFonctionAccess().getOutAssignment_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVar1Assignment_0()); }
(rule__Input__Var1Assignment_0)
{ after(grammarAccess.getInputAccess().getVar1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_1()); }
(rule__Input__Group_1__0)*
{ after(grammarAccess.getInputAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVar2Assignment_1_1()); }
(rule__Input__Var2Assignment_1_1)
{ after(grammarAccess.getInputAccess().getVar2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Output__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVar1Assignment_0()); }
(rule__Output__Var1Assignment_0)
{ after(grammarAccess.getOutputAccess().getVar1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getGroup_1()); }
(rule__Output__Group_1__0)*
{ after(grammarAccess.getOutputAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Output__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group_1__0__Impl
	rule__Output__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVar2Assignment_1_1()); }
(rule__Output__Var2Assignment_1_1)
{ after(grammarAccess.getOutputAccess().getVar2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commandes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commandes__Group__0__Impl
	rule__Commandes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getCom1Assignment_0()); }
(rule__Commandes__Com1Assignment_0)
{ after(grammarAccess.getCommandesAccess().getCom1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commandes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commandes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getGroup_1()); }
(rule__Commandes__Group_1__0)*
{ after(grammarAccess.getCommandesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commandes__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commandes__Group_1__0__Impl
	rule__Commandes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getCommandesAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commandes__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commandes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getCom2Assignment_1_1()); }
(rule__Commandes__Com2Assignment_1_1)
{ after(grammarAccess.getCommandesAccess().getCom2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commande__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commande__Group_0__0__Impl
	rule__Commande__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getCommandeAction_0_0()); }
(

)
{ after(grammarAccess.getCommandeAccess().getCommandeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commande__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commande__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getNopAssignment_0_1()); }
(rule__Commande__NopAssignment_0_1)
{ after(grammarAccess.getCommandeAccess().getNopAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AffectVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AffectVar__Group__0__Impl
	rule__AffectVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AffectVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectVarAccess().getVar1Assignment_0()); }
(rule__AffectVar__Var1Assignment_0)
{ after(grammarAccess.getAffectVarAccess().getVar1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AffectVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AffectVar__Group__1__Impl
	rule__AffectVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AffectVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectVarAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAffectVarAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AffectVar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AffectVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AffectVar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectVarAccess().getExpAssignment_2()); }
(rule__AffectVar__ExpAssignment_2)
{ after(grammarAccess.getAffectVarAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExp2Assignment_2()); }
(rule__While__Exp2Assignment_2)
{ after(grammarAccess.getWhileAccess().getExp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getWhileAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__6__Impl
	rule__While__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCom3Assignment_6()); }
(rule__While__Com3Assignment_6)
{ after(grammarAccess.getWhileAccess().getCom3Assignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__7__Impl
	rule__While__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getOdKeyword_8()); }

	'od' 

{ after(grammarAccess.getWhileAccess().getOdKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__For__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExp3Assignment_2()); }
(rule__For__Exp3Assignment_2)
{ after(grammarAccess.getForAccess().getExp3Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getForAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCom4Assignment_6()); }
(rule__For__Com4Assignment_6)
{ after(grammarAccess.getForAccess().getCom4Assignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getOdKeyword_8()); }

	'od' 

{ after(grammarAccess.getForAccess().getOdKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExp4Assignment_2()); }
(rule__If__Exp4Assignment_2)
{ after(grammarAccess.getIfAccess().getExp4Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCom5Assignment_6()); }
(rule__If__Com5Assignment_6)
{ after(grammarAccess.getIfAccess().getCom5Assignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__8__Impl
	rule__If__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_8()); }
(rule__If__Group_8__0)?
{ after(grammarAccess.getIfAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getFiKeyword_9()); }

	'fi' 

{ after(grammarAccess.getIfAccess().getFiKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__If__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_8__0__Impl
	rule__If__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getElseKeyword_8_0()); }

	'else' 

{ after(grammarAccess.getIfAccess().getElseKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_8__1__Impl
	rule__If__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_8_1()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_8__2__Impl
	rule__If__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCom6Assignment_8_2()); }
(rule__If__Com6Assignment_8_2)
{ after(grammarAccess.getIfAccess().getCom6Assignment_8_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_8_3()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_8_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Foreach__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getForeachKeyword_0()); }

	'foreach' 

{ after(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExp5Assignment_2()); }
(rule__Foreach__Exp5Assignment_2)
{ after(grammarAccess.getForeachAccess().getExp5Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getInKeyword_4()); }

	'in' 

{ after(grammarAccess.getForeachAccess().getInKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__6__Impl
	rule__Foreach__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExp6Assignment_6()); }
(rule__Foreach__Exp6Assignment_6)
{ after(grammarAccess.getForeachAccess().getExp6Assignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__7__Impl
	rule__Foreach__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__8__Impl
	rule__Foreach__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getDoKeyword_8()); }

	'do' 

{ after(grammarAccess.getForeachAccess().getDoKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__9__Impl
	rule__Foreach__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__10__Impl
	rule__Foreach__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getCom7Assignment_10()); }
(rule__Foreach__Com7Assignment_10)
{ after(grammarAccess.getForeachAccess().getCom7Assignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__11__Impl
	rule__Foreach__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getOdKeyword_12()); }

	'od' 

{ after(grammarAccess.getForeachAccess().getOdKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__Vars__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group__0__Impl
	rule__Vars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVar2Assignment_0()); }
(rule__Vars__Var2Assignment_0)
{ after(grammarAccess.getVarsAccess().getVar2Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getGroup_1()); }
(rule__Vars__Group_1__0)*
{ after(grammarAccess.getVarsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vars__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group_1__0__Impl
	rule__Vars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVar3Assignment_1_1()); }
(rule__Vars__Var3Assignment_1_1)
{ after(grammarAccess.getVarsAccess().getVar3Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exprs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group__0__Impl
	rule__Exprs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExprSAssignment_0()); }
(rule__Exprs__ExprSAssignment_0)
{ after(grammarAccess.getExprsAccess().getExprSAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getGroup_1()); }
(rule__Exprs__Group_1__0)*
{ after(grammarAccess.getExprsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exprs__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group_1__0__Impl
	rule__Exprs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExprS2Assignment_1_1()); }
(rule__Exprs__ExprS2Assignment_1_1)
{ after(grammarAccess.getExprsAccess().getExprS2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprSimple__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_0__0__Impl
	rule__ExprSimple__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getExprSimpleAction_0_0()); }
(

)
{ after(grammarAccess.getExprSimpleAccess().getExprSimpleAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getVideAssignment_0_1()); }
(rule__ExprSimple__VideAssignment_0_1)
{ after(grammarAccess.getExprSimpleAccess().getVideAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cons__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cons__Group__0__Impl
	rule__Cons__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cons__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConsAccess().getPARAGTerminalRuleCall_0()); }
	RULE_PARAG
{ after(grammarAccess.getConsAccess().getPARAGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cons__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cons__Group__1__Impl
	rule__Cons__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cons__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConsAccess().getConsKeyword_1()); }

	'cons' 

{ after(grammarAccess.getConsAccess().getConsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cons__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cons__Group__2__Impl
	rule__Cons__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Cons__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConsAccess().getLe1Assignment_2()); }
(rule__Cons__Le1Assignment_2)
{ after(grammarAccess.getConsAccess().getLe1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cons__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cons__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cons__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConsAccess().getPARADTerminalRuleCall_3()); }
	RULE_PARAD
{ after(grammarAccess.getConsAccess().getPARADTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Liste__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Liste__Group__0__Impl
	rule__Liste__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Liste__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListeAccess().getPARAGTerminalRuleCall_0()); }
	RULE_PARAG
{ after(grammarAccess.getListeAccess().getPARAGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Liste__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Liste__Group__1__Impl
	rule__Liste__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Liste__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListeAccess().getListKeyword_1()); }

	'list' 

{ after(grammarAccess.getListeAccess().getListKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Liste__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Liste__Group__2__Impl
	rule__Liste__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Liste__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListeAccess().getLe2Assignment_2()); }
(rule__Liste__Le2Assignment_2)
{ after(grammarAccess.getListeAccess().getLe2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Liste__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Liste__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Liste__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListeAccess().getPARADTerminalRuleCall_3()); }
	RULE_PARAD
{ after(grammarAccess.getListeAccess().getPARADTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Hd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hd__Group__0__Impl
	rule__Hd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getPARAGTerminalRuleCall_0()); }
	RULE_PARAG
{ after(grammarAccess.getHdAccess().getPARAGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hd__Group__1__Impl
	rule__Hd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getHdKeyword_1()); }

	'hd' 

{ after(grammarAccess.getHdAccess().getHdKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hd__Group__2__Impl
	rule__Hd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getLCParserRuleCall_2()); }
	ruleLC
{ after(grammarAccess.getHdAccess().getLCParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hd__Group__3__Impl
	rule__Hd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getLe3Assignment_3()); }
(rule__Hd__Le3Assignment_3)
{ after(grammarAccess.getHdAccess().getLe3Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hd__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getPARADTerminalRuleCall_4()); }
	RULE_PARAD
{ after(grammarAccess.getHdAccess().getPARADTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Tl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tl__Group__0__Impl
	rule__Tl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getPARAGTerminalRuleCall_0()); }
	RULE_PARAG
{ after(grammarAccess.getTlAccess().getPARAGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tl__Group__1__Impl
	rule__Tl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getTlKeyword_1()); }

	'tl' 

{ after(grammarAccess.getTlAccess().getTlKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tl__Group__2__Impl
	rule__Tl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getLCParserRuleCall_2()); }
	ruleLC
{ after(grammarAccess.getTlAccess().getLCParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tl__Group__3__Impl
	rule__Tl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getLe4Assignment_3()); }
(rule__Tl__Le4Assignment_3)
{ after(grammarAccess.getTlAccess().getLe4Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getPARADTerminalRuleCall_4()); }
	RULE_PARAD
{ after(grammarAccess.getTlAccess().getPARADTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SymboleEx__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymboleEx__Group__0__Impl
	rule__SymboleEx__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getPARAGTerminalRuleCall_0()); }
	RULE_PARAG
{ after(grammarAccess.getSymboleExAccess().getPARAGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SymboleEx__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymboleEx__Group__1__Impl
	rule__SymboleEx__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getPAssignment_1()); }
(rule__SymboleEx__PAssignment_1)
{ after(grammarAccess.getSymboleExAccess().getPAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SymboleEx__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymboleEx__Group__2__Impl
	rule__SymboleEx__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getLe5Assignment_2()); }
(rule__SymboleEx__Le5Assignment_2)
{ after(grammarAccess.getSymboleExAccess().getLe5Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SymboleEx__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymboleEx__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getPARADTerminalRuleCall_3()); }
	RULE_PARAD
{ after(grammarAccess.getSymboleExAccess().getPARADTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr__Group__0__Impl
	rule__LExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); }
	ruleLC
{ after(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getExpLeAssignment_1()); }
(rule__LExpr__ExpLeAssignment_1)
{ after(grammarAccess.getLExprAccess().getExpLeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LExpr2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr2__Group__0__Impl
	rule__LExpr2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExpr2Access().getLCParserRuleCall_0()); }
	ruleLC
{ after(grammarAccess.getLExpr2Access().getLCParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LExpr2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExpr2Access().getExpLe2Assignment_1()); }
(rule__LExpr2__ExpLe2Assignment_1)
{ after(grammarAccess.getLExpr2Access().getExpLe2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprAnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group__0__Impl
	rule__ExprAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExpOAssignment_0()); }
(rule__ExprAnd__ExpOAssignment_0)
{ after(grammarAccess.getExprAndAccess().getExpOAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getGroup_1()); }
(rule__ExprAnd__Group_1__0)*
{ after(grammarAccess.getExprAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprAnd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__0__Impl
	rule__ExprAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
	ruleLC
{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__1__Impl
	rule__ExprAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__2__Impl
	rule__ExprAnd__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
	ruleLC
{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExpO2Assignment_1_3()); }
(rule__ExprAnd__ExpO2Assignment_1_3)
{ after(grammarAccess.getExprAndAccess().getExpO2Assignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExprOr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group__0__Impl
	rule__ExprOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExpNAssignment_0()); }
(rule__ExprOr__ExpNAssignment_0)
{ after(grammarAccess.getExprOrAccess().getExpNAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getGroup_1()); }
(rule__ExprOr__Group_1__0)*
{ after(grammarAccess.getExprOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprOr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__0__Impl
	rule__ExprOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
	ruleLC
{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__1__Impl
	rule__ExprOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__2__Impl
	rule__ExprOr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
	ruleLC
{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExpN2Assignment_1_3()); }
(rule__ExprOr__ExpN2Assignment_1_3)
{ after(grammarAccess.getExprOrAccess().getExpN2Assignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExprNotNot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNotNot__Group__0__Impl
	rule__ExprNotNot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotNot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotNotAccess().getGroup_0()); }
(rule__ExprNotNot__Group_0__0)
{ after(grammarAccess.getExprNotNotAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNotNot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNotNot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotNot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotNotAccess().getExpEq1Assignment_1()); }
(rule__ExprNotNot__ExpEq1Assignment_1)
{ after(grammarAccess.getExprNotNotAccess().getExpEq1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprNotNot__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNotNot__Group_0__0__Impl
	rule__ExprNotNot__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotNot__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotNotAccess().getNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getExprNotNotAccess().getNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNotNot__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNotNot__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotNot__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotNotAccess().getLCParserRuleCall_0_1()); }
	ruleLC
{ after(grammarAccess.getExprNotNotAccess().getLCParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprEq__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__0__Impl
	rule__ExprEq__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpS1Assignment_0_0()); }
(rule__ExprEq__ExpS1Assignment_0_0)
{ after(grammarAccess.getExprEqAccess().getExpS1Assignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__1__Impl
	rule__ExprEq__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1()); }

	'=?' 

{ after(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpS2Assignment_0_2()); }
(rule__ExprEq__ExpS2Assignment_0_2)
{ after(grammarAccess.getExprEqAccess().getExpS2Assignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExprEq__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__0__Impl
	rule__ExprEq__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getPARAGTerminalRuleCall_1_0()); }
	RULE_PARAG
{ after(grammarAccess.getExprEqAccess().getPARAGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__1__Impl
	rule__ExprEq__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpRAssignment_1_1()); }
(rule__ExprEq__ExpRAssignment_1_1)
{ after(grammarAccess.getExprEqAccess().getExpRAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getPARADTerminalRuleCall_1_2()); }
	RULE_PARAD
{ after(grammarAccess.getExprEqAccess().getPARADTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ProgrammeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgrammeProgrammeParserRuleCall_0()); }
	ruleProgramme{ after(grammarAccess.getModelAccess().getProgrammeProgrammeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Programme__FonctAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgrammeAccess().getFonctFonctionParserRuleCall_1_0_0()); }
	ruleFonction{ after(grammarAccess.getProgrammeAccess().getFonctFonctionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__SymboleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getSymboleSYMTerminalRuleCall_2_0()); }
	RULE_SYM{ after(grammarAccess.getFonctionAccess().getSymboleSYMTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__InAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getInInputParserRuleCall_7_0()); }
	ruleInput{ after(grammarAccess.getFonctionAccess().getInInputParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__ComAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getComCommandesParserRuleCall_9_0()); }
	ruleCommandes{ after(grammarAccess.getFonctionAccess().getComCommandesParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__OutAssignment_13
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFonctionAccess().getOutOutputParserRuleCall_13_0()); }
	ruleOutput{ after(grammarAccess.getFonctionAccess().getOutOutputParserRuleCall_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Var1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVar1VARTerminalRuleCall_0_0()); }
	RULE_VAR{ after(grammarAccess.getInputAccess().getVar1VARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Var2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVar2VARTerminalRuleCall_1_1_0()); }
	RULE_VAR{ after(grammarAccess.getInputAccess().getVar2VARTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Var1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVar1VARTerminalRuleCall_0_0()); }
	RULE_VAR{ after(grammarAccess.getOutputAccess().getVar1VARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Var2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVar2VARTerminalRuleCall_1_1_0()); }
	RULE_VAR{ after(grammarAccess.getOutputAccess().getVar2VARTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Com1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getCom1CommandeParserRuleCall_0_0()); }
	ruleCommande{ after(grammarAccess.getCommandesAccess().getCom1CommandeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commandes__Com2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandesAccess().getCom2CommandeParserRuleCall_1_1_0()); }
	ruleCommande{ after(grammarAccess.getCommandesAccess().getCom2CommandeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__NopAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getNopNopKeyword_0_1_0()); }
(
{ before(grammarAccess.getCommandeAccess().getNopNopKeyword_0_1_0()); }

	'nop' 

{ after(grammarAccess.getCommandeAccess().getNopNopKeyword_0_1_0()); }
)

{ after(grammarAccess.getCommandeAccess().getNopNopKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__AffectVarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getAffectVarAffectVarParserRuleCall_1_0()); }
	ruleAffectVar{ after(grammarAccess.getCommandeAccess().getAffectVarAffectVarParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__WhileCAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getWhileCWhileParserRuleCall_2_0()); }
	ruleWhile{ after(grammarAccess.getCommandeAccess().getWhileCWhileParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__ForCAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getForCForParserRuleCall_3_0()); }
	ruleFor{ after(grammarAccess.getCommandeAccess().getForCForParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__IfCAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getIfCIfParserRuleCall_4_0()); }
	ruleIf{ after(grammarAccess.getCommandeAccess().getIfCIfParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commande__ForeachCAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandeAccess().getForeachCForeachParserRuleCall_5_0()); }
	ruleForeach{ after(grammarAccess.getCommandeAccess().getForeachCForeachParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AffectVar__Var1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectVarAccess().getVar1VarsParserRuleCall_0_0()); }
	ruleVars{ after(grammarAccess.getAffectVarAccess().getVar1VarsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AffectVar__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectVarAccess().getExpExprsParserRuleCall_2_0()); }
	ruleExprs{ after(grammarAccess.getAffectVarAccess().getExpExprsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__Exp2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExp2ExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getWhileAccess().getExp2ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__Com3Assignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCom3CommandesParserRuleCall_6_0()); }
	ruleCommandes{ after(grammarAccess.getWhileAccess().getCom3CommandesParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__Exp3Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExp3ExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getForAccess().getExp3ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__Com4Assignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCom4CommandesParserRuleCall_6_0()); }
	ruleCommandes{ after(grammarAccess.getForAccess().getCom4CommandesParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__Exp4Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExp4ExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfAccess().getExp4ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__Com5Assignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCom5CommandesParserRuleCall_6_0()); }
	ruleCommandes{ after(grammarAccess.getIfAccess().getCom5CommandesParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__Com6Assignment_8_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCom6CommandesParserRuleCall_8_2_0()); }
	ruleCommandes{ after(grammarAccess.getIfAccess().getCom6CommandesParserRuleCall_8_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Exp5Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExp5ExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getForeachAccess().getExp5ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Exp6Assignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getExp6ExprParserRuleCall_6_0()); }
	ruleExpr{ after(grammarAccess.getForeachAccess().getExp6ExprParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Com7Assignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getCom7CommandesParserRuleCall_10_0()); }
	ruleCommandes{ after(grammarAccess.getForeachAccess().getCom7CommandesParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Var2Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVar2VARTerminalRuleCall_0_0()); }
	RULE_VAR{ after(grammarAccess.getVarsAccess().getVar2VARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Var3Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVar3VARTerminalRuleCall_1_1_0()); }
	RULE_VAR{ after(grammarAccess.getVarsAccess().getVar3VARTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__ExprSAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExprSExprParserRuleCall_0_0()); }
	ruleExpr{ after(grammarAccess.getExprsAccess().getExprSExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__ExprS2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExprS2ExprParserRuleCall_1_1_0()); }
	ruleExpr{ after(grammarAccess.getExprsAccess().getExprS2ExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExpAAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpAExprAndParserRuleCall_0_0()); }
	ruleExprAnd{ after(grammarAccess.getExprAccess().getExpAExprAndParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExpSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpSExprSimpleParserRuleCall_1_0()); }
	ruleExprSimple{ after(grammarAccess.getExprAccess().getExpSExprSimpleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__VideAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getVideNilKeyword_0_1_0()); }
(
{ before(grammarAccess.getExprSimpleAccess().getVideNilKeyword_0_1_0()); }

	'nil' 

{ after(grammarAccess.getExprSimpleAccess().getVideNilKeyword_0_1_0()); }
)

{ after(grammarAccess.getExprSimpleAccess().getVideNilKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getVariableVARTerminalRuleCall_1_0()); }
	RULE_VAR{ after(grammarAccess.getExprSimpleAccess().getVariableVARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymboleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getSymboleSYMTerminalRuleCall_2_0()); }
	RULE_SYM{ after(grammarAccess.getExprSimpleAccess().getSymboleSYMTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__ConsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getConsConsParserRuleCall_3_0()); }
	ruleCons{ after(grammarAccess.getExprSimpleAccess().getConsConsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__ListeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getListeListeParserRuleCall_4_0()); }
	ruleListe{ after(grammarAccess.getExprSimpleAccess().getListeListeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__HdAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getHdHdParserRuleCall_5_0()); }
	ruleHd{ after(grammarAccess.getExprSimpleAccess().getHdHdParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__TlAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getTlTlParserRuleCall_6_0()); }
	ruleTl{ after(grammarAccess.getExprSimpleAccess().getTlTlParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymbolExAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getSymbolExSymboleExParserRuleCall_7_0()); }
	ruleSymboleEx{ after(grammarAccess.getExprSimpleAccess().getSymbolExSymboleExParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cons__Le1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConsAccess().getLe1LExprParserRuleCall_2_0()); }
	ruleLExpr{ after(grammarAccess.getConsAccess().getLe1LExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Liste__Le2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListeAccess().getLe2LExprParserRuleCall_2_0()); }
	ruleLExpr{ after(grammarAccess.getListeAccess().getLe2LExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hd__Le3Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHdAccess().getLe3ExprParserRuleCall_3_0()); }
	ruleExpr{ after(grammarAccess.getHdAccess().getLe3ExprParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tl__Le4Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTlAccess().getLe4ExprParserRuleCall_3_0()); }
	ruleExpr{ after(grammarAccess.getTlAccess().getLe4ExprParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__PAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getPSYMTerminalRuleCall_1_0()); }
	RULE_SYM{ after(grammarAccess.getSymboleExAccess().getPSYMTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymboleEx__Le5Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymboleExAccess().getLe5LExpr2ParserRuleCall_2_0()); }
	ruleLExpr2{ after(grammarAccess.getSymboleExAccess().getLe5LExpr2ParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__ExpLeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getExpLeExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getLExprAccess().getExpLeExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr2__ExpLe2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExpr2Access().getExpLe2ExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getLExpr2Access().getExpLe2ExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__ExpOAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExpOExprOrParserRuleCall_0_0()); }
	ruleExprOr{ after(grammarAccess.getExprAndAccess().getExpOExprOrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__ExpO2Assignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExpO2ExprOrParserRuleCall_1_3_0()); }
	ruleExprOr{ after(grammarAccess.getExprAndAccess().getExpO2ExprOrParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__ExpNAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExpNExprNotParserRuleCall_0_0()); }
	ruleExprNot{ after(grammarAccess.getExprOrAccess().getExpNExprNotParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__ExpN2Assignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExpN2ExprNotParserRuleCall_1_3_0()); }
	ruleExprNot{ after(grammarAccess.getExprOrAccess().getExpN2ExprNotParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__ExprNotNotAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExprNotNotExprNotNotParserRuleCall_0_0()); }
	ruleExprNotNot{ after(grammarAccess.getExprNotAccess().getExprNotNotExprNotNotParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__ExprNotDoAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExprNotDoExprNotDoParserRuleCall_1_0()); }
	ruleExprNotDo{ after(grammarAccess.getExprNotAccess().getExprNotDoExprNotDoParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotNot__ExpEq1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotNotAccess().getExpEq1ExprEqParserRuleCall_1_0()); }
	ruleExprEq{ after(grammarAccess.getExprNotNotAccess().getExpEq1ExprEqParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNotDo__ExpEq2Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotDoAccess().getExpEq2ExprEqParserRuleCall_0()); }
	ruleExprEq{ after(grammarAccess.getExprNotDoAccess().getExpEq2ExprEqParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExpS1Assignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpS1ExprSimpleParserRuleCall_0_0_0()); }
	ruleExprSimple{ after(grammarAccess.getExprEqAccess().getExpS1ExprSimpleParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExpS2Assignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpS2ExprSimpleParserRuleCall_0_2_0()); }
	ruleExprSimple{ after(grammarAccess.getExprEqAccess().getExpS2ExprSimpleParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExpRAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExpRExprParserRuleCall_1_1_0()); }
	ruleExpr{ after(grammarAccess.getExprEqAccess().getExpRExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VAR : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_SYM : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('a'..'z'|'A'..'Z'|'0'..'9')+)* ('?'|'!')?;

RULE_PARAG : '(';

RULE_PARAD : ')';

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


